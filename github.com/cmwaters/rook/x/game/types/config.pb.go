// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/game/config.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GameConfig struct {
	Initial *InitializationConfig `protobuf:"bytes,1,opt,name=initial,proto3" json:"initial,omitempty"`
	Map     *MapConfig            `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
}

func (m *GameConfig) Reset()         { *m = GameConfig{} }
func (m *GameConfig) String() string { return proto.CompactTextString(m) }
func (*GameConfig) ProtoMessage()    {}
func (*GameConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a521dc39a70f280a, []int{0}
}
func (m *GameConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameConfig.Merge(m, src)
}
func (m *GameConfig) XXX_Size() int {
	return m.Size()
}
func (m *GameConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GameConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GameConfig proto.InternalMessageInfo

func (m *GameConfig) GetInitial() *InitializationConfig {
	if m != nil {
		return m.Initial
	}
	return nil
}

func (m *GameConfig) GetMap() *MapConfig {
	if m != nil {
		return m.Map
	}
	return nil
}

type MapConfig struct {
	Width            uint32 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height           uint32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Seed             int64  `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	MountainsDensity uint32 `protobuf:"varint,4,opt,name=mountains_density,json=mountainsDensity,proto3" json:"mountains_density,omitempty"`
	ForestDensity    uint32 `protobuf:"varint,5,opt,name=forest_density,json=forestDensity,proto3" json:"forest_density,omitempty"`
	LakeDensity      uint32 `protobuf:"varint,6,opt,name=lake_density,json=lakeDensity,proto3" json:"lake_density,omitempty"`
	PlainsDensity    uint32 `protobuf:"varint,7,opt,name=plains_density,json=plainsDensity,proto3" json:"plains_density,omitempty"`
}

func (m *MapConfig) Reset()         { *m = MapConfig{} }
func (m *MapConfig) String() string { return proto.CompactTextString(m) }
func (*MapConfig) ProtoMessage()    {}
func (*MapConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a521dc39a70f280a, []int{1}
}
func (m *MapConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapConfig.Merge(m, src)
}
func (m *MapConfig) XXX_Size() int {
	return m.Size()
}
func (m *MapConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MapConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MapConfig proto.InternalMessageInfo

func (m *MapConfig) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *MapConfig) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MapConfig) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *MapConfig) GetMountainsDensity() uint32 {
	if m != nil {
		return m.MountainsDensity
	}
	return 0
}

func (m *MapConfig) GetForestDensity() uint32 {
	if m != nil {
		return m.ForestDensity
	}
	return 0
}

func (m *MapConfig) GetLakeDensity() uint32 {
	if m != nil {
		return m.LakeDensity
	}
	return 0
}

func (m *MapConfig) GetPlainsDensity() uint32 {
	if m != nil {
		return m.PlainsDensity
	}
	return 0
}

type InitializationConfig struct {
	Teams     uint32       `protobuf:"varint,1,opt,name=teams,proto3" json:"teams,omitempty"`
	Resources *ResourceSet `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (m *InitializationConfig) Reset()         { *m = InitializationConfig{} }
func (m *InitializationConfig) String() string { return proto.CompactTextString(m) }
func (*InitializationConfig) ProtoMessage()    {}
func (*InitializationConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a521dc39a70f280a, []int{2}
}
func (m *InitializationConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitializationConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitializationConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitializationConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializationConfig.Merge(m, src)
}
func (m *InitializationConfig) XXX_Size() int {
	return m.Size()
}
func (m *InitializationConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializationConfig.DiscardUnknown(m)
}

var xxx_messageInfo_InitializationConfig proto.InternalMessageInfo

func (m *InitializationConfig) GetTeams() uint32 {
	if m != nil {
		return m.Teams
	}
	return 0
}

func (m *InitializationConfig) GetResources() *ResourceSet {
	if m != nil {
		return m.Resources
	}
	return nil
}

type Params struct {
	// maps are indexed by settlement id
	ProductionRate   map[uint32]*ResourceSet `protobuf:"bytes,1,rep,name=production_rate,json=productionRate,proto3" json:"production_rate,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConstructionCost map[uint32]*ResourceSet `protobuf:"bytes,2,rep,name=construction_cost,json=constructionCost,proto3" json:"construction_cost,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a521dc39a70f280a, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetProductionRate() map[uint32]*ResourceSet {
	if m != nil {
		return m.ProductionRate
	}
	return nil
}

func (m *Params) GetConstructionCost() map[uint32]*ResourceSet {
	if m != nil {
		return m.ConstructionCost
	}
	return nil
}

func init() {
	proto.RegisterType((*GameConfig)(nil), "rook.game.GameConfig")
	proto.RegisterType((*MapConfig)(nil), "rook.game.MapConfig")
	proto.RegisterType((*InitializationConfig)(nil), "rook.game.InitializationConfig")
	proto.RegisterType((*Params)(nil), "rook.game.Params")
	proto.RegisterMapType((map[uint32]*ResourceSet)(nil), "rook.game.Params.ConstructionCostEntry")
	proto.RegisterMapType((map[uint32]*ResourceSet)(nil), "rook.game.Params.ProductionRateEntry")
}

func init() { proto.RegisterFile("rook/game/config.proto", fileDescriptor_a521dc39a70f280a) }

var fileDescriptor_a521dc39a70f280a = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x41, 0x8f, 0xd2, 0x40,
	0x14, 0xc7, 0x29, 0x2c, 0x6c, 0x78, 0xc8, 0xca, 0x8e, 0x2c, 0x69, 0x38, 0x54, 0x24, 0x41, 0x49,
	0x34, 0x25, 0x59, 0x3d, 0xa8, 0x17, 0x13, 0xd1, 0x18, 0x0f, 0x9a, 0x4d, 0xf5, 0xa2, 0x1e, 0x36,
	0x43, 0x99, 0x85, 0x09, 0xb4, 0xd3, 0xcc, 0xbc, 0xba, 0xe2, 0xa7, 0xf0, 0x63, 0x79, 0xdc, 0xa3,
	0x47, 0x03, 0x89, 0x17, 0xbf, 0x84, 0x99, 0x99, 0xd2, 0xed, 0x2a, 0x89, 0x97, 0xbd, 0xcd, 0xfc,
	0xe7, 0xf7, 0x7e, 0xaf, 0xf3, 0x9a, 0x81, 0x8e, 0x14, 0x62, 0x31, 0x9a, 0xd1, 0x88, 0x8d, 0x42,
	0x11, 0x9f, 0xf1, 0x99, 0x9f, 0x48, 0x81, 0x82, 0xd4, 0x75, 0xee, 0xeb, 0xbc, 0x7b, 0x74, 0x89,
	0xe0, 0x2a, 0x61, 0xca, 0x12, 0x7d, 0x01, 0xf0, 0x8a, 0x46, 0x6c, 0x6c, 0xaa, 0xc8, 0x13, 0xd8,
	0xe7, 0x31, 0x47, 0x4e, 0x97, 0xae, 0xd3, 0x73, 0x86, 0x8d, 0xe3, 0xdb, 0x7e, 0x6e, 0xf0, 0x5f,
	0xdb, 0x13, 0xfe, 0x95, 0x22, 0x17, 0xb1, 0xad, 0x08, 0xb6, 0x3c, 0xb9, 0x0b, 0x95, 0x88, 0x26,
	0x6e, 0xd9, 0x94, 0xb5, 0x0b, 0x65, 0x6f, 0x68, 0x92, 0xb1, 0x1a, 0xe8, 0xff, 0x76, 0xa0, 0x9e,
	0x47, 0xa4, 0x0d, 0xd5, 0x73, 0x3e, 0xc5, 0xb9, 0x69, 0xd7, 0x0c, 0xec, 0x86, 0x74, 0xa0, 0x36,
	0x67, 0x7c, 0x36, 0x47, 0xa3, 0x6b, 0x06, 0xd9, 0x8e, 0x10, 0xd8, 0x53, 0x8c, 0x4d, 0xdd, 0x4a,
	0xcf, 0x19, 0x56, 0x02, 0xb3, 0x26, 0xf7, 0xe1, 0x30, 0x12, 0x69, 0x8c, 0x94, 0xc7, 0xea, 0x74,
	0xca, 0x62, 0xc5, 0x71, 0xe5, 0xee, 0x99, 0xb2, 0x56, 0x7e, 0xf0, 0xc2, 0xe6, 0x64, 0x00, 0x07,
	0x67, 0x42, 0x32, 0x85, 0x39, 0x59, 0x35, 0x64, 0xd3, 0xa6, 0x5b, 0xec, 0x0e, 0xdc, 0x58, 0xd2,
	0x05, 0xcb, 0xa1, 0x9a, 0x81, 0x1a, 0x3a, 0x2b, 0x98, 0x92, 0xe5, 0x95, 0x9e, 0xfb, 0xd6, 0x64,
	0xd3, 0x0c, 0xeb, 0x4f, 0xa0, 0xbd, 0x6b, 0x6c, 0xfa, 0xde, 0xc8, 0x68, 0xa4, 0xb6, 0xf7, 0x36,
	0x1b, 0xf2, 0x08, 0xea, 0x92, 0x29, 0x91, 0xca, 0x90, 0xa9, 0x6c, 0x92, 0x9d, 0xc2, 0x24, 0x83,
	0xec, 0xec, 0x1d, 0xc3, 0xe0, 0x12, 0xec, 0xff, 0x2a, 0x43, 0xed, 0x84, 0x4a, 0x2d, 0x78, 0x0b,
	0x37, 0x13, 0x29, 0xa6, 0x69, 0xa8, 0x5b, 0x9d, 0x4a, 0x8a, 0xcc, 0x75, 0x7a, 0x95, 0x61, 0xe3,
	0x78, 0x50, 0xd0, 0x58, 0xd6, 0x3f, 0xc9, 0xc1, 0x80, 0x22, 0x7b, 0x19, 0xa3, 0x5c, 0x05, 0x07,
	0xc9, 0x95, 0x90, 0xbc, 0x87, 0xc3, 0x50, 0xc4, 0x0a, 0x65, 0x66, 0x0c, 0x85, 0xd2, 0xff, 0x44,
	0x1b, 0xef, 0xfd, 0x6b, 0x1c, 0x17, 0xd0, 0xb1, 0x50, 0x68, 0x9d, 0xad, 0xf0, 0xaf, 0xb8, 0xfb,
	0x01, 0x6e, 0xed, 0x68, 0x4e, 0x5a, 0x50, 0x59, 0xb0, 0x55, 0x36, 0x11, 0xbd, 0x24, 0x0f, 0xa0,
	0xfa, 0x99, 0x2e, 0x53, 0xf6, 0x9f, 0x59, 0x58, 0xe8, 0x69, 0xf9, 0xb1, 0xd3, 0xfd, 0x04, 0x47,
	0x3b, 0xbf, 0xe2, 0x3a, 0xe4, 0xcf, 0x9f, 0x7d, 0x5f, 0x7b, 0xce, 0xc5, 0xda, 0x73, 0x7e, 0xae,
	0x3d, 0xe7, 0xdb, 0xc6, 0x2b, 0x5d, 0x6c, 0xbc, 0xd2, 0x8f, 0x8d, 0x57, 0xfa, 0x38, 0x98, 0x71,
	0x9c, 0xa7, 0x13, 0x3f, 0x14, 0xd1, 0x28, 0x8c, 0xce, 0x29, 0x32, 0xa9, 0x46, 0xe6, 0xc1, 0x7d,
	0x29, 0x3c, 0xb9, 0x49, 0xcd, 0xbc, 0xb9, 0x87, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x53,
	0xbd, 0xe9, 0xaf, 0x03, 0x00, 0x00,
}

func (m *GameConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Initial != nil {
		{
			size, err := m.Initial.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MapConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlainsDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.PlainsDensity))
		i--
		dAtA[i] = 0x38
	}
	if m.LakeDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.LakeDensity))
		i--
		dAtA[i] = 0x30
	}
	if m.ForestDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.ForestDensity))
		i--
		dAtA[i] = 0x28
	}
	if m.MountainsDensity != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MountainsDensity))
		i--
		dAtA[i] = 0x20
	}
	if m.Seed != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Seed))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InitializationConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitializationConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitializationConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Teams != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Teams))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConstructionCost) > 0 {
		for k := range m.ConstructionCost {
			v := m.ConstructionCost[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintConfig(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintConfig(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ProductionRate) > 0 {
		for k := range m.ProductionRate {
			v := m.ProductionRate[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintConfig(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintConfig(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintConfig(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Initial != nil {
		l = m.Initial.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *MapConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovConfig(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovConfig(uint64(m.Height))
	}
	if m.Seed != 0 {
		n += 1 + sovConfig(uint64(m.Seed))
	}
	if m.MountainsDensity != 0 {
		n += 1 + sovConfig(uint64(m.MountainsDensity))
	}
	if m.ForestDensity != 0 {
		n += 1 + sovConfig(uint64(m.ForestDensity))
	}
	if m.LakeDensity != 0 {
		n += 1 + sovConfig(uint64(m.LakeDensity))
	}
	if m.PlainsDensity != 0 {
		n += 1 + sovConfig(uint64(m.PlainsDensity))
	}
	return n
}

func (m *InitializationConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Teams != 0 {
		n += 1 + sovConfig(uint64(m.Teams))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProductionRate) > 0 {
		for k, v := range m.ProductionRate {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConfig(uint64(l))
			}
			mapEntrySize := 1 + sovConfig(uint64(k)) + l
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	if len(m.ConstructionCost) > 0 {
		for k, v := range m.ConstructionCost {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovConfig(uint64(l))
			}
			mapEntrySize := 1 + sovConfig(uint64(k)) + l
			n += mapEntrySize + 1 + sovConfig(uint64(mapEntrySize))
		}
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Initial == nil {
				m.Initial = &InitializationConfig{}
			}
			if err := m.Initial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &MapConfig{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MountainsDensity", wireType)
			}
			m.MountainsDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MountainsDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForestDensity", wireType)
			}
			m.ForestDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForestDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LakeDensity", wireType)
			}
			m.LakeDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LakeDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlainsDensity", wireType)
			}
			m.PlainsDensity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlainsDensity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitializationConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitializationConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitializationConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teams", wireType)
			}
			m.Teams = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Teams |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceSet{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductionRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProductionRate == nil {
				m.ProductionRate = make(map[uint32]*ResourceSet)
			}
			var mapkey uint32
			var mapvalue *ResourceSet
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConfig
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthConfig
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceSet{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ProductionRate[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstructionCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConstructionCost == nil {
				m.ConstructionCost = make(map[uint32]*ResourceSet)
			}
			var mapkey uint32
			var mapvalue *ResourceSet
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowConfig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthConfig
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthConfig
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ResourceSet{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipConfig(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthConfig
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ConstructionCost[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
