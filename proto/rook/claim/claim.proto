syntax = "proto3";
package rook.claim;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/rook-network/rook/x/claim/types";

enum Action {
  option (gogoproto.goproto_enum_prefix) = false;

  // Activate action must be completed before all others
  ActionActivate = 0;
  ActionPlay = 1;
  ActionWin = 2;
  ActionDelegate = 3;
  ActionTrade = 4;
}

// A Claim Records is the metadata of claim data per address
message ClaimRecord {
  // address of claim user
  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];

  // total initial claimable amount for the user
  int64 initial_claimable_amount = 2
      [ (gogoproto.moretags) = "yaml:\"initial_claimable_amount\"" ];

  // true if action is completed
  // index of bool in array refers to action enum #
  repeated bool action_completed = 3
      [ (gogoproto.moretags) = "yaml:\"action_completed\"" ];
}

// Params defines the claim module's parameters.
message Params {
  google.protobuf.Timestamp airdrop_start_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"airdrop_start_time\""
  ];
  google.protobuf.Duration duration_until_decay = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration_until_decay,omitempty",
    (gogoproto.moretags) = "yaml:\"duration_until_decay\""
  ];
  google.protobuf.Duration duration_of_decay = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration_of_decay,omitempty",
    (gogoproto.moretags) = "yaml:\"duration_of_decay\""
  ];
  // denom of claimable asset
  string claim_denom = 4;
}