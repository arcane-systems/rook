syntax = "proto3";
package rook.matchmaker;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "rook/game/config.proto";

option go_package = "github.com/arcane-systems/rook/x/matchmaker/types";

message Room {

  oneof game {
    // Add a custom config
    rook.game.Config config = 1;

    // Or you can use a predefined mode
    uint32 mode_id = 2;
  }

  // the current players in the room
  repeated string players = 3;

  // pending invitations for players that can join (like a whitelist)
  repeated string pending = 4;

  // anyone can join
  bool public = 5;

  // the minimum amount of players needed to start a game
  uint32 quorum = 6;

  // the max amount of players that can join the room
  uint32 capacity = 7;

  oneof time {
    // when the room was created. Rooms get garbage collected after a while
    google.protobuf.Timestamp created = 8 [ (gogoproto.stdtime) = true ];

    // when quorum is reached and we are locked in to starting the game.
    // The prestart_wait_period gives a bufer for more people to join if they
    // want.
    google.protobuf.Timestamp ready = 9 [ (gogoproto.stdtime) = true ];

    // the time that the game is scheduled to start. Participants have until
    // then to join. The game only starts if the quorum is met. This is good
    // for tournament games
    google.protobuf.Timestamp scheduled = 10 [ (gogoproto.stdtime) = true ];
  }
}

// IndexedRoom pins an id to the room
message IndexedRoom {
  uint64 room_id = 1;
  Room room = 2 [ (gogoproto.nullable) = false ];
}

// Modes are a way of accumulating a small set of possible games that people can
// choose between
message Mode {
  // the config to be used for the game
  rook.game.Config config = 1 [ (gogoproto.nullable) = false ];

  // the minimum amount of players needed to start a game
  uint32 quorum = 2;

  // the max amount of players that can join the room
  uint32 capacity = 3;
}

// IndexedMode pins an id to the mode
message IndexedMode {
  uint32 mode_id = 1;
  Mode mode = 2 [ (gogoproto.nullable) = false ];
  uint64 game_id = 3;
}

message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // the maximum duration a room can last for before it is closed and all
  // players are kicked
  google.protobuf.Duration room_lifespan = 1 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"room_lifespan\""
  ];

  // the period betwee a quorum of players readying up and the start of the
  // game. This allows a few more players to join
  google.protobuf.Duration prestart_wait_period = 2 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"prestart_wait_period\""
  ];
}
