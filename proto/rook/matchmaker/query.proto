syntax = "proto3";
package rook.matchmaker;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "rook/matchmaker/matchmaker.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/arcane-systems/rook/x/matchmaker/types";

// Query defines the gRPC querier service.
service Query {
  // Rooms returns all the public rooms that a player can join
  rpc Rooms(QueryGetRoomsRequest) returns (QueryGetRoomsResponse) {
    option (google.api.http).get = "/matchmaker/rooms";
  }

  // Room returns the current state of a specific room
  rpc Room(QueryGetRoomRequest) returns (QueryGetRoomResponse) {
    option (google.api.http).get = "/matchmaker/room/{id}";
  }

  // Player returns the room that the player is in if any
  rpc Player(QueryRoomByPlayerRequest) returns (QueryRoomByPlayerResponse) {
    option (google.api.http).get = "/matchmaker/player/{player}";
  }

  // Invitations lists all the rooms that a player is invited to
  rpc Invitations(QueryGetInvitationsRequest)
      returns (QueryGetInvitationsResponse) {
    option (google.api.http).get = "/matchmaker/invitations/{player}";
  }

  // Modes lists all the publicly available modes and their respective room ids
  rpc Modes(QueryGetModesRequest) returns (QueryGetModesResponse) {
    option (google.api.http).get = "/matchmaker/modes";
  }

  // Params lists the current matchmaker params
  rpc Params(QueryGetParamsRequest) returns (QueryGetParamsResponse) {
    option (google.api.http).get = "/matchmaker/params";
  }
}

message QueryGetRoomsRequest {}

message QueryGetRoomsResponse {
  repeated IndexedRoom rooms = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetRoomRequest { uint64 id = 1; }

message QueryGetRoomResponse { Room room = 1; }

message QueryRoomByPlayerRequest { string player = 1; }

message QueryRoomByPlayerResponse { IndexedRoom room = 1; }

message QueryGetInvitationsRequest { string player = 1; }

message QueryGetInvitationsResponse {
  repeated IndexedRoom rooms = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetModesRequest {}

message QueryGetModesResponse {
  repeated IndexedMode modes = 1 [ (gogoproto.nullable) = false ];
}

message QueryGetParamsRequest {}

message QueryGetParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}