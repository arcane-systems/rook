syntax = "proto3";
package rook.matchmaker;

import "rook/matchmaker/matchmaker.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/rook-network/rook/x/matchmaker/types";

// Msg defines the Msg service.
service Msg {
  // Host creates a room for a custom game
  rpc Host(MsgHost) returns (MsgHostResponse);

  // Join adds a player to a room
  rpc Join(MsgJoin) returns (MsgJoinResponse);

  // Find adds a player to a room based of a mode
  rpc Find(MsgFind) returns (MsgFindResponse);

  // Leave removes a player from the room they are in.
  rpc Leave(MsgLeave) returns (MsgLeaveResponse);

  // AddMode adds a new mode
  rpc AddMode(MsgAddMode) returns (MsgAddModeResponse);

  // RemoveMode removes an existing mode
  rpc RemoveMode(MsgRemoveMode) returns (MsgRemoveModeResponse);
}

message MsgHost {
  // The host of the room
  string host = 1;

  oneof game {
    // Mode defines the game config, the quorum and capacity of players
    Mode mode = 2;
    // Or you can use a predefined mode
    uint32 mode_id = 3;
  }

  // the list of players that are invited to join the room
  repeated string invitees = 4;

  // public defines whether the room is open for all players to join
  bool public = 5;

  // For scheduled games (like tournaments). Participants have until
  // then to join. The game only starts if the quorum is met.
  google.protobuf.Timestamp scheduled = 6 [ (gogoproto.stdtime) = true ];
}

message MsgHostResponse { uint64 room_id = 1; }

message MsgJoin {
  string player = 1;
  uint64 room_id = 2;
}

message MsgJoinResponse {}

message MsgFind {
  string player = 1;
  uint32 mode = 2;
}

message MsgFindResponse { uint64 room_id = 1; }

message MsgLeave {
  string player = 1;
  uint64 room_id = 2;
}

message MsgLeaveResponse {}

message MsgAddMode {
  string authority = 1;
  Mode mode = 2 [ (gogoproto.nullable) = false ];
}

message MsgAddModeResponse { uint32 mode_id = 1; }

message MsgRemoveMode {
  string authority = 1;
  uint32 id = 2;
}

message MsgRemoveModeResponse {}