syntax = "proto3";
package rook.game;

import "rook/game/game.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/rook-network/rook/x/game/types";

message Config {
  InitializationConfig initial = 1;
  MapConfig map = 2;
}

message MapConfig {
  uint32 width = 1;
  uint32 height = 2;
  int64 seed = 3;
  uint32 mountains_density = 4;
  uint32 forest_density = 5;
  uint32 lake_density = 6;
  uint32 plains_density = 7;
}

message InitializationConfig {
  uint32 teams = 1;
  ResourceSet resources = 2;
}

message Params {
  // the resources that a settlement produces
  repeated ResourceSet production_rate = 1;
  // the resource that a settlement requires to build
  repeated ResourceSet construction_cost = 2;
  // the maximum duration a game can last before a draw is called
  google.protobuf.Duration max_game_duration = 3 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"game_lifespan\""
  ];
}