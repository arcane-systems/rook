syntax = "proto3";
package rook.game;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "rook/game/config.proto";
import "rook/game/game.proto";

option go_package = "github.com/arcane-systems/rook/x/game/types";

// Query defines the gRPC querier service.
service Query {

  // Games returns all active games
  rpc Games(QueryGamesRequest) returns (QueryGamesResponse) {
    option (google.api.http).get = "/game/games";
  }

  rpc Game(QueryGameByIDRequest) returns (QueryGameByIDResponse) {
    option (google.api.http).get = "/game/game/{id}";
  }

  rpc GameByPlayer(QueryGameByPlayerRequest)
      returns (QueryGameByPlayerResponse) {
    option (google.api.http).get = "/game/player/{player}";
  }

  // Queries a game state by id.
  rpc State(QueryGameStateRequest) returns (QueryGameStateResponse) {
    option (google.api.http).get = "/game/state/{id}";
  }

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/game/params/{version}";
  }
}

message QueryGamesRequest {}

message QueryGamesResponse { repeated uint64 ids = 1; }

message QueryGameStateRequest { uint64 id = 1; }

message QueryGameStateResponse {
  State state = 1 [ (gogoproto.nullable) = false ];
}

message QueryGameByIDRequest { uint64 id = 1; }

message QueryGameByIDResponse {
  GameSnapshot game = 1 [ (gogoproto.nullable) = false ];
}

message QueryGameByPlayerRequest { string player = 1; }

message QueryGameByPlayerResponse {
  GameSnapshot game = 1 [ (gogoproto.nullable) = false ];
  uint64 id = 2; 
}

message QueryParamsRequest { uint32 version = 1; }

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
  uint32 version = 2;
}
