syntax = "proto3";
package rook.game;

option go_package = "github.com/arcane-systems/rook/x/game/types";

// Game is what is the in memory state and includes a map of territories
// used for faster look up. Full game is not persisted to disk (Overview and
// State are)
message Game {
  repeated string players = 1;
  Map map = 2;
  State state = 3;
  uint32 param_version = 4;
  map<uint32, Territory> territory = 5;
}

// GameSnapshot contains a complete snapshot representation of the state of any
// game. The object is used to trans
message GameSnapshot {
  Map map = 1;
  State state = 2;
  uint32 param_version = 3;
}

// Overview is the fixed aspect of the game
message Overview {
  repeated string players = 1;
  Map map = 2;
  uint32 param_version = 3;
}

// State is the variable aspect of the game that
// changes per step
message State {
  repeated Faction factions = 1;
  repeated Populace gaia = 2;
  uint64 step = 3;
}

// Map represents the 2D grid of various landscapes
message Map {
  repeated Landscape tiles = 1;
  uint32 width = 2;
}

// Factions are a combination of resources and populace
// that are controlled by one or more players
message Faction {
  repeated string players = 1;
  ResourceSet resources = 2;
  repeated Populace population = 3;
}

// A populace is a group of people. They may be
// wandering or part of a settlement
message Populace {
  uint32 amount = 1;
  Position position = 2;
  Settlement settlement = 3;
  bool used = 4;
}

message Position {
  uint32 x = 3;
  uint32 y = 4;
}

enum Direction {
  LEFT = 0;
  RIGHT = 1;
  UP = 2;
  DOWN = 3;
}

enum Landscape {
  UNKNOWN = 0;
  PLAINS = 1;
  FOREST = 2;
  MOUNTAINS = 3;
  LAKE = 4;
}

enum Settlement {
  NONE = 0;
  TOWN = 1;
  CITY = 2;
  CAPITAL = 3;
  LUMBERMILL = 4;
  QUARRY = 5;
  FARM = 6;
  ROOK = 7;
}

message ResourceSet {
  uint32 food = 1;
  uint32 stone = 2;
  uint32 wood = 3;
  uint32 population = 4;
  uint32 tech = 5;
}

message Territory {
  uint32 faction = 1;
  uint32 populace = 2;
}