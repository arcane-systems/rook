// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/game/game.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_LEFT  Direction = 0
	Direction_RIGHT Direction = 1
	Direction_UP    Direction = 2
	Direction_DOWN  Direction = 3
)

var Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
	2: "UP",
	3: "DOWN",
}

var Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
	"UP":    2,
	"DOWN":  3,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{0}
}

type Landscape int32

const (
	Landscape_UNKNOWN   Landscape = 0
	Landscape_PLAINS    Landscape = 1
	Landscape_FOREST    Landscape = 2
	Landscape_MOUNTAINS Landscape = 3
	Landscape_LAKE      Landscape = 4
)

var Landscape_name = map[int32]string{
	0: "UNKNOWN",
	1: "PLAINS",
	2: "FOREST",
	3: "MOUNTAINS",
	4: "LAKE",
}

var Landscape_value = map[string]int32{
	"UNKNOWN":   0,
	"PLAINS":    1,
	"FOREST":    2,
	"MOUNTAINS": 3,
	"LAKE":      4,
}

func (x Landscape) String() string {
	return proto.EnumName(Landscape_name, int32(x))
}

func (Landscape) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{1}
}

type Settlement int32

const (
	Settlement_NONE       Settlement = 0
	Settlement_TOWN       Settlement = 1
	Settlement_CITY       Settlement = 2
	Settlement_CAPITAL    Settlement = 3
	Settlement_LUMBERMILL Settlement = 4
	Settlement_QUARRY     Settlement = 5
	Settlement_FARM       Settlement = 6
	Settlement_ROOK       Settlement = 7
)

var Settlement_name = map[int32]string{
	0: "NONE",
	1: "TOWN",
	2: "CITY",
	3: "CAPITAL",
	4: "LUMBERMILL",
	5: "QUARRY",
	6: "FARM",
	7: "ROOK",
}

var Settlement_value = map[string]int32{
	"NONE":       0,
	"TOWN":       1,
	"CITY":       2,
	"CAPITAL":    3,
	"LUMBERMILL": 4,
	"QUARRY":     5,
	"FARM":       6,
	"ROOK":       7,
}

func (x Settlement) String() string {
	return proto.EnumName(Settlement_name, int32(x))
}

func (Settlement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{2}
}

// Game is what is the in memory state and includes a map of territories
// used for faster look up. Full game is not persisted to disk (Overview and
// State are)
type Game struct {
	Players      []string              `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Map          *Map                  `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	State        *State                `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	ParamVersion uint32                `protobuf:"varint,4,opt,name=param_version,json=paramVersion,proto3" json:"param_version,omitempty"`
	Territory    map[uint32]*Territory `protobuf:"bytes,5,rep,name=territory,proto3" json:"territory,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StartTime    *time.Time            `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
}

func (m *Game) Reset()         { *m = Game{} }
func (m *Game) String() string { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()    {}
func (*Game) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{0}
}
func (m *Game) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Game) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Game.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Game) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Game.Merge(m, src)
}
func (m *Game) XXX_Size() int {
	return m.Size()
}
func (m *Game) XXX_DiscardUnknown() {
	xxx_messageInfo_Game.DiscardUnknown(m)
}

var xxx_messageInfo_Game proto.InternalMessageInfo

func (m *Game) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Game) GetMap() *Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *Game) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Game) GetParamVersion() uint32 {
	if m != nil {
		return m.ParamVersion
	}
	return 0
}

func (m *Game) GetTerritory() map[uint32]*Territory {
	if m != nil {
		return m.Territory
	}
	return nil
}

func (m *Game) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// GameSnapshot contains a complete snapshot representation of the state of any
// game. The object is used to trans
type GameSnapshot struct {
	Map          *Map   `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
	State        *State `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	ParamVersion uint32 `protobuf:"varint,3,opt,name=param_version,json=paramVersion,proto3" json:"param_version,omitempty"`
}

func (m *GameSnapshot) Reset()         { *m = GameSnapshot{} }
func (m *GameSnapshot) String() string { return proto.CompactTextString(m) }
func (*GameSnapshot) ProtoMessage()    {}
func (*GameSnapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{1}
}
func (m *GameSnapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameSnapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameSnapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameSnapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameSnapshot.Merge(m, src)
}
func (m *GameSnapshot) XXX_Size() int {
	return m.Size()
}
func (m *GameSnapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_GameSnapshot.DiscardUnknown(m)
}

var xxx_messageInfo_GameSnapshot proto.InternalMessageInfo

func (m *GameSnapshot) GetMap() *Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *GameSnapshot) GetState() *State {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *GameSnapshot) GetParamVersion() uint32 {
	if m != nil {
		return m.ParamVersion
	}
	return 0
}

// Overview is the fixed aspect of the game
type Overview struct {
	Players      []string   `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Map          *Map       `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	ParamVersion uint32     `protobuf:"varint,3,opt,name=param_version,json=paramVersion,proto3" json:"param_version,omitempty"`
	StartTime    *time.Time `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time,omitempty"`
}

func (m *Overview) Reset()         { *m = Overview{} }
func (m *Overview) String() string { return proto.CompactTextString(m) }
func (*Overview) ProtoMessage()    {}
func (*Overview) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{2}
}
func (m *Overview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Overview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Overview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Overview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Overview.Merge(m, src)
}
func (m *Overview) XXX_Size() int {
	return m.Size()
}
func (m *Overview) XXX_DiscardUnknown() {
	xxx_messageInfo_Overview.DiscardUnknown(m)
}

var xxx_messageInfo_Overview proto.InternalMessageInfo

func (m *Overview) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Overview) GetMap() *Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *Overview) GetParamVersion() uint32 {
	if m != nil {
		return m.ParamVersion
	}
	return 0
}

func (m *Overview) GetStartTime() *time.Time {
	if m != nil {
		return m.StartTime
	}
	return nil
}

// State is the variable aspect of the game that
// changes per step
type State struct {
	Factions []*Faction  `protobuf:"bytes,1,rep,name=factions,proto3" json:"factions,omitempty"`
	Gaia     []*Populace `protobuf:"bytes,2,rep,name=gaia,proto3" json:"gaia,omitempty"`
	Step     uint64      `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{3}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetFactions() []*Faction {
	if m != nil {
		return m.Factions
	}
	return nil
}

func (m *State) GetGaia() []*Populace {
	if m != nil {
		return m.Gaia
	}
	return nil
}

func (m *State) GetStep() uint64 {
	if m != nil {
		return m.Step
	}
	return 0
}

// Map represents the 2D grid of various landscapes
type Map struct {
	Tiles []Landscape `protobuf:"varint,1,rep,packed,name=tiles,proto3,enum=rook.game.Landscape" json:"tiles,omitempty"`
	Width uint32      `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{4}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetTiles() []Landscape {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *Map) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

// Factions are a combination of resources and populace
// that are controlled by one or more players
type Faction struct {
	Players    []string     `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	Resources  *ResourceSet `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	Population []*Populace  `protobuf:"bytes,3,rep,name=population,proto3" json:"population,omitempty"`
}

func (m *Faction) Reset()         { *m = Faction{} }
func (m *Faction) String() string { return proto.CompactTextString(m) }
func (*Faction) ProtoMessage()    {}
func (*Faction) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{5}
}
func (m *Faction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Faction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Faction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Faction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Faction.Merge(m, src)
}
func (m *Faction) XXX_Size() int {
	return m.Size()
}
func (m *Faction) XXX_DiscardUnknown() {
	xxx_messageInfo_Faction.DiscardUnknown(m)
}

var xxx_messageInfo_Faction proto.InternalMessageInfo

func (m *Faction) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Faction) GetResources() *ResourceSet {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Faction) GetPopulation() []*Populace {
	if m != nil {
		return m.Population
	}
	return nil
}

// A populace is a group of people. They may be
// wandering or part of a settlement
type Populace struct {
	Amount     uint32     `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Position   *Position  `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	Settlement Settlement `protobuf:"varint,3,opt,name=settlement,proto3,enum=rook.game.Settlement" json:"settlement,omitempty"`
	Used       bool       `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
}

func (m *Populace) Reset()         { *m = Populace{} }
func (m *Populace) String() string { return proto.CompactTextString(m) }
func (*Populace) ProtoMessage()    {}
func (*Populace) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{6}
}
func (m *Populace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Populace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Populace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Populace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Populace.Merge(m, src)
}
func (m *Populace) XXX_Size() int {
	return m.Size()
}
func (m *Populace) XXX_DiscardUnknown() {
	xxx_messageInfo_Populace.DiscardUnknown(m)
}

var xxx_messageInfo_Populace proto.InternalMessageInfo

func (m *Populace) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Populace) GetPosition() *Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Populace) GetSettlement() Settlement {
	if m != nil {
		return m.Settlement
	}
	return Settlement_NONE
}

func (m *Populace) GetUsed() bool {
	if m != nil {
		return m.Used
	}
	return false
}

type Position struct {
	X uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{7}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Position) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type ResourceSet struct {
	Food       uint32 `protobuf:"varint,1,opt,name=food,proto3" json:"food,omitempty"`
	Stone      uint32 `protobuf:"varint,2,opt,name=stone,proto3" json:"stone,omitempty"`
	Wood       uint32 `protobuf:"varint,3,opt,name=wood,proto3" json:"wood,omitempty"`
	Population uint32 `protobuf:"varint,4,opt,name=population,proto3" json:"population,omitempty"`
	Tech       uint32 `protobuf:"varint,5,opt,name=tech,proto3" json:"tech,omitempty"`
}

func (m *ResourceSet) Reset()         { *m = ResourceSet{} }
func (m *ResourceSet) String() string { return proto.CompactTextString(m) }
func (*ResourceSet) ProtoMessage()    {}
func (*ResourceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{8}
}
func (m *ResourceSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSet.Merge(m, src)
}
func (m *ResourceSet) XXX_Size() int {
	return m.Size()
}
func (m *ResourceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSet.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSet proto.InternalMessageInfo

func (m *ResourceSet) GetFood() uint32 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *ResourceSet) GetStone() uint32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

func (m *ResourceSet) GetWood() uint32 {
	if m != nil {
		return m.Wood
	}
	return 0
}

func (m *ResourceSet) GetPopulation() uint32 {
	if m != nil {
		return m.Population
	}
	return 0
}

func (m *ResourceSet) GetTech() uint32 {
	if m != nil {
		return m.Tech
	}
	return 0
}

type Territory struct {
	Faction  uint32 `protobuf:"varint,1,opt,name=faction,proto3" json:"faction,omitempty"`
	Populace uint32 `protobuf:"varint,2,opt,name=populace,proto3" json:"populace,omitempty"`
}

func (m *Territory) Reset()         { *m = Territory{} }
func (m *Territory) String() string { return proto.CompactTextString(m) }
func (*Territory) ProtoMessage()    {}
func (*Territory) Descriptor() ([]byte, []int) {
	return fileDescriptor_32ee8d6bd64d76dc, []int{9}
}
func (m *Territory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Territory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Territory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Territory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Territory.Merge(m, src)
}
func (m *Territory) XXX_Size() int {
	return m.Size()
}
func (m *Territory) XXX_DiscardUnknown() {
	xxx_messageInfo_Territory.DiscardUnknown(m)
}

var xxx_messageInfo_Territory proto.InternalMessageInfo

func (m *Territory) GetFaction() uint32 {
	if m != nil {
		return m.Faction
	}
	return 0
}

func (m *Territory) GetPopulace() uint32 {
	if m != nil {
		return m.Populace
	}
	return 0
}

func init() {
	proto.RegisterEnum("rook.game.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("rook.game.Landscape", Landscape_name, Landscape_value)
	proto.RegisterEnum("rook.game.Settlement", Settlement_name, Settlement_value)
	proto.RegisterType((*Game)(nil), "rook.game.Game")
	proto.RegisterMapType((map[uint32]*Territory)(nil), "rook.game.Game.TerritoryEntry")
	proto.RegisterType((*GameSnapshot)(nil), "rook.game.GameSnapshot")
	proto.RegisterType((*Overview)(nil), "rook.game.Overview")
	proto.RegisterType((*State)(nil), "rook.game.State")
	proto.RegisterType((*Map)(nil), "rook.game.Map")
	proto.RegisterType((*Faction)(nil), "rook.game.Faction")
	proto.RegisterType((*Populace)(nil), "rook.game.Populace")
	proto.RegisterType((*Position)(nil), "rook.game.Position")
	proto.RegisterType((*ResourceSet)(nil), "rook.game.ResourceSet")
	proto.RegisterType((*Territory)(nil), "rook.game.Territory")
}

func init() { proto.RegisterFile("rook/game/game.proto", fileDescriptor_32ee8d6bd64d76dc) }

var fileDescriptor_32ee8d6bd64d76dc = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xce, 0xd8, 0x4e, 0x1a, 0x9f, 0xb4, 0x91, 0x35, 0x94, 0x95, 0x95, 0x8b, 0x6c, 0x64, 0xa4,
	0xa5, 0x54, 0xc2, 0x91, 0xb2, 0x20, 0x21, 0x84, 0x84, 0xd2, 0x6e, 0x5a, 0xa2, 0xe6, 0xa7, 0x4c,
	0x1c, 0xd0, 0x72, 0xb3, 0x9a, 0xa6, 0xd3, 0xd4, 0x6a, 0xec, 0xb1, 0xec, 0x49, 0xdb, 0x5c, 0x20,
	0xde, 0x00, 0xed, 0x13, 0xf0, 0x04, 0x3c, 0x08, 0x97, 0x7b, 0xc9, 0x1d, 0xa8, 0x7d, 0x11, 0x34,
	0x33, 0x4e, 0xea, 0x82, 0x40, 0x5b, 0x71, 0x53, 0x9d, 0x9f, 0xef, 0x9c, 0xf3, 0xcd, 0x77, 0x4e,
	0x1d, 0xd8, 0x4d, 0x39, 0xbf, 0x6a, 0xcf, 0x69, 0xc4, 0xd4, 0x1f, 0x3f, 0x49, 0xb9, 0xe0, 0xd8,
	0x96, 0x51, 0x5f, 0x06, 0x1a, 0xbb, 0x73, 0x3e, 0xe7, 0x2a, 0xda, 0x96, 0x96, 0x06, 0x34, 0x9e,
	0xcf, 0x39, 0x9f, 0x2f, 0x58, 0x5b, 0x79, 0x67, 0xcb, 0x8b, 0xb6, 0x08, 0x23, 0x96, 0x09, 0x1a,
	0x25, 0x1a, 0xe0, 0xdd, 0x19, 0x60, 0x1d, 0xd3, 0x88, 0x61, 0x17, 0xb6, 0x92, 0x05, 0x5d, 0xb1,
	0x34, 0x73, 0x51, 0xcb, 0xdc, 0xb3, 0xc9, 0xda, 0xc5, 0x2d, 0x30, 0x23, 0x9a, 0xb8, 0x46, 0x0b,
	0xed, 0xd5, 0x3a, 0x75, 0x7f, 0x33, 0xd2, 0x1f, 0xd2, 0x84, 0xc8, 0x14, 0x7e, 0x01, 0xe5, 0x4c,
	0x50, 0xc1, 0x5c, 0x53, 0x61, 0x9c, 0x02, 0x66, 0x22, 0xe3, 0x44, 0xa7, 0xf1, 0x47, 0xb0, 0x93,
	0xd0, 0x94, 0x46, 0x6f, 0xae, 0x59, 0x9a, 0x85, 0x3c, 0x76, 0xad, 0x16, 0xda, 0xdb, 0x21, 0xdb,
	0x2a, 0xf8, 0x9d, 0x8e, 0xe1, 0xaf, 0xc0, 0x16, 0x2c, 0x4d, 0x43, 0xc1, 0xd3, 0x95, 0x5b, 0x6e,
	0x99, 0x7b, 0xb5, 0x4e, 0xb3, 0xd0, 0x50, 0x92, 0xf5, 0x83, 0x35, 0xa0, 0x17, 0x8b, 0x74, 0x45,
	0x1e, 0x0a, 0xf0, 0xd7, 0x00, 0x99, 0xa0, 0xa9, 0x78, 0x23, 0x1f, 0xea, 0x56, 0x14, 0x9f, 0x86,
	0xaf, 0x55, 0xf0, 0xd7, 0x2a, 0xf8, 0xc1, 0x5a, 0x85, 0x03, 0xeb, 0xed, 0x1f, 0xcf, 0x11, 0xb1,
	0x55, 0x8d, 0x8c, 0x36, 0x08, 0xd4, 0x1f, 0x77, 0xc7, 0x0e, 0x98, 0x57, 0x6c, 0xe5, 0x22, 0xc5,
	0x55, 0x9a, 0x78, 0x1f, 0xca, 0xd7, 0x74, 0xb1, 0x64, 0xb9, 0x26, 0xbb, 0x05, 0x7a, 0x9b, 0x5a,
	0xa2, 0x21, 0x5f, 0x1a, 0x5f, 0x20, 0xef, 0x47, 0xd8, 0x96, 0xb4, 0x27, 0x31, 0x4d, 0xb2, 0x4b,
	0x2e, 0xd6, 0x8a, 0xa2, 0xf7, 0x50, 0xd4, 0x78, 0xa2, 0xa2, 0xe6, 0x3f, 0x15, 0xf5, 0x7e, 0x45,
	0x50, 0x1d, 0x5f, 0xb3, 0xf4, 0x3a, 0x64, 0x37, 0xff, 0x6b, 0xcf, 0xef, 0x33, 0xed, 0x6f, 0x1b,
	0xb0, 0x9e, 0xbc, 0x01, 0x4f, 0x40, 0x59, 0xbd, 0x11, 0xfb, 0x50, 0xbd, 0xa0, 0x33, 0x11, 0xf2,
	0x58, 0x73, 0xad, 0x75, 0x70, 0x81, 0xd5, 0x91, 0x4e, 0x91, 0x0d, 0x06, 0x7f, 0x0c, 0xd6, 0x9c,
	0x86, 0xd4, 0x35, 0x14, 0xf6, 0x83, 0x02, 0xf6, 0x94, 0x27, 0xcb, 0x05, 0x9d, 0x31, 0xa2, 0x00,
	0x18, 0x83, 0x95, 0x09, 0x96, 0x28, 0xfa, 0x16, 0x51, 0xb6, 0x77, 0x0c, 0xe6, 0x90, 0x26, 0x72,
	0xb5, 0x22, 0x5c, 0x30, 0x3d, 0xb0, 0xfe, 0x68, 0xb5, 0x03, 0x1a, 0x9f, 0x67, 0x33, 0x9a, 0x30,
	0xa2, 0x21, 0x78, 0x17, 0xca, 0x37, 0xe1, 0xb9, 0xb8, 0x54, 0x92, 0xed, 0x10, 0xed, 0x78, 0x3f,
	0x23, 0xd8, 0xca, 0xb9, 0xfd, 0x87, 0xd8, 0x9f, 0x81, 0x9d, 0xb2, 0x8c, 0x2f, 0xd3, 0x19, 0xcb,
	0x72, 0xc9, 0x9f, 0x15, 0x66, 0x91, 0x3c, 0x37, 0x61, 0x82, 0x3c, 0x00, 0xf1, 0x4b, 0x80, 0x44,
	0x3d, 0x45, 0x68, 0xf5, 0xff, 0xf5, 0x9d, 0x05, 0x98, 0xf7, 0x0b, 0x82, 0xea, 0x3a, 0x81, 0x9f,
	0x41, 0x85, 0x46, 0x7c, 0x19, 0x8b, 0xfc, 0x9e, 0x73, 0x0f, 0xb7, 0xa1, 0x9a, 0xf0, 0x2c, 0x54,
	0x7d, 0x35, 0x9d, 0xc7, 0x7d, 0x75, 0x8a, 0x6c, 0x40, 0xf8, 0x73, 0x80, 0x8c, 0x09, 0xb1, 0x60,
	0x11, 0x8b, 0x85, 0x52, 0xb2, 0xde, 0xf9, 0xb0, 0x78, 0xa6, 0x9b, 0x24, 0x29, 0x00, 0xa5, 0xf4,
	0xcb, 0x8c, 0x9d, 0xab, 0xbb, 0xa8, 0x12, 0x65, 0x7b, 0x2f, 0x24, 0xbf, 0xbc, 0xed, 0x36, 0xa0,
	0xdb, 0xfc, 0xac, 0xd0, 0xad, 0xf4, 0x56, 0xf9, 0x47, 0x02, 0xad, 0xbc, 0x9f, 0xa0, 0x56, 0xd0,
	0x45, 0xb6, 0xba, 0xe0, 0xfc, 0x3c, 0x7f, 0x88, 0xb2, 0xe5, 0x4a, 0x32, 0xc1, 0x63, 0xb6, 0x5e,
	0x89, 0x72, 0x24, 0xf2, 0x46, 0x22, 0x75, 0x5f, 0x65, 0xe3, 0xe6, 0x23, 0x29, 0xf5, 0x8c, 0x42,
	0x44, 0xd6, 0x08, 0x36, 0xbb, 0x74, 0xcb, 0xba, 0x46, 0xda, 0x5e, 0x17, 0xec, 0xcd, 0xff, 0xb7,
	0xdc, 0x6d, 0x7e, 0x79, 0x39, 0x83, 0xb5, 0x8b, 0x1b, 0x52, 0x4b, 0xad, 0x77, 0xce, 0x63, 0xe3,
	0xef, 0x77, 0xc0, 0x7e, 0x15, 0xa6, 0x4c, 0x03, 0xab, 0x60, 0x0d, 0x7a, 0x47, 0x81, 0x53, 0xc2,
	0x36, 0x94, 0x49, 0xff, 0xf8, 0x9b, 0xc0, 0x41, 0xb8, 0x02, 0xc6, 0xf4, 0xd4, 0x31, 0x64, 0xf2,
	0xd5, 0xf8, 0xfb, 0x91, 0x63, 0xee, 0xf7, 0xc1, 0xde, 0xdc, 0x1e, 0xae, 0xc1, 0xd6, 0x74, 0x74,
	0x32, 0x92, 0x99, 0x12, 0x06, 0xa8, 0x9c, 0x0e, 0xba, 0xfd, 0xd1, 0xc4, 0x41, 0xd2, 0x3e, 0x1a,
	0x93, 0xde, 0x24, 0x70, 0x0c, 0xbc, 0x03, 0xf6, 0x70, 0x3c, 0x1d, 0x05, 0x2a, 0x65, 0xaa, 0x39,
	0xdd, 0x93, 0x9e, 0x63, 0xed, 0xcf, 0x01, 0x1e, 0x16, 0x23, 0xe3, 0xa3, 0xf1, 0xa8, 0xe7, 0x94,
	0xa4, 0x15, 0xc8, 0x96, 0x48, 0x5a, 0x87, 0xfd, 0xe0, 0xb5, 0x63, 0xc8, 0x49, 0x87, 0xdd, 0xd3,
	0x7e, 0xd0, 0x1d, 0x38, 0x26, 0xae, 0x03, 0x0c, 0xa6, 0xc3, 0x83, 0x1e, 0x19, 0xf6, 0x07, 0x03,
	0xc7, 0x92, 0xd3, 0xbe, 0x9d, 0x76, 0x09, 0x79, 0xed, 0x94, 0x65, 0xc9, 0x51, 0x97, 0x0c, 0x9d,
	0x8a, 0xb4, 0xc8, 0x78, 0x7c, 0xe2, 0x6c, 0x1d, 0x1c, 0xfe, 0x76, 0xd7, 0x44, 0xef, 0xee, 0x9a,
	0xe8, 0xcf, 0xbb, 0x26, 0x7a, 0x7b, 0xdf, 0x2c, 0xbd, 0xbb, 0x6f, 0x96, 0x7e, 0xbf, 0x6f, 0x96,
	0x7e, 0xf8, 0x64, 0x1e, 0x8a, 0xcb, 0xe5, 0x99, 0x3f, 0xe3, 0x51, 0x5b, 0x9e, 0xcb, 0xa7, 0x31,
	0x13, 0x37, 0x3c, 0xbd, 0x52, 0x4e, 0xfb, 0x56, 0xff, 0xc6, 0x89, 0x55, 0xc2, 0xb2, 0xb3, 0x8a,
	0xfa, 0x5c, 0xbc, 0xfc, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xec, 0x3e, 0xca, 0xfd, 0x06, 0x00,
	0x00,
}

func (m *Game) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Game) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Game) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintGame(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Territory) > 0 {
		for k := range m.Territory {
			v := m.Territory[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGame(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGame(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGame(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ParamVersion != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ParamVersion))
		i--
		dAtA[i] = 0x20
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Players[iNdEx])
			copy(dAtA[i:], m.Players[iNdEx])
			i = encodeVarintGame(dAtA, i, uint64(len(m.Players[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GameSnapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameSnapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameSnapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ParamVersion != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ParamVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Overview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Overview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Overview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartTime != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintGame(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x22
	}
	if m.ParamVersion != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.ParamVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Map != nil {
		{
			size, err := m.Map.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Players[iNdEx])
			copy(dAtA[i:], m.Players[iNdEx])
			i = encodeVarintGame(dAtA, i, uint64(len(m.Players[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Step != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Gaia) > 0 {
		for iNdEx := len(m.Gaia) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Gaia[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Factions) > 0 {
		for iNdEx := len(m.Factions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Factions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tiles) > 0 {
		dAtA10 := make([]byte, len(m.Tiles)*10)
		var j9 int
		for _, num := range m.Tiles {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintGame(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Faction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Faction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Faction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Population) > 0 {
		for iNdEx := len(m.Population) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Population[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Players[iNdEx])
			copy(dAtA[i:], m.Players[iNdEx])
			i = encodeVarintGame(dAtA, i, uint64(len(m.Players[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Populace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Populace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Populace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Used {
		i--
		if m.Used {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Settlement != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Settlement))
		i--
		dAtA[i] = 0x18
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGame(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x20
	}
	if m.X != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ResourceSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tech != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Tech))
		i--
		dAtA[i] = 0x28
	}
	if m.Population != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Population))
		i--
		dAtA[i] = 0x20
	}
	if m.Wood != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Wood))
		i--
		dAtA[i] = 0x18
	}
	if m.Stone != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Stone))
		i--
		dAtA[i] = 0x10
	}
	if m.Food != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Food))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Territory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Territory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Territory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Populace != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Populace))
		i--
		dAtA[i] = 0x10
	}
	if m.Faction != 0 {
		i = encodeVarintGame(dAtA, i, uint64(m.Faction))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	offset -= sovGame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Game) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, s := range m.Players {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.ParamVersion != 0 {
		n += 1 + sovGame(uint64(m.ParamVersion))
	}
	if len(m.Territory) > 0 {
		for k, v := range m.Territory {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGame(uint64(l))
			}
			mapEntrySize := 1 + sovGame(uint64(k)) + l
			n += mapEntrySize + 1 + sovGame(uint64(mapEntrySize))
		}
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *GameSnapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.ParamVersion != 0 {
		n += 1 + sovGame(uint64(m.ParamVersion))
	}
	return n
}

func (m *Overview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, s := range m.Players {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Map != nil {
		l = m.Map.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.ParamVersion != 0 {
		n += 1 + sovGame(uint64(m.ParamVersion))
	}
	if m.StartTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartTime)
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Factions) > 0 {
		for _, e := range m.Factions {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if len(m.Gaia) > 0 {
		for _, e := range m.Gaia {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Step != 0 {
		n += 1 + sovGame(uint64(m.Step))
	}
	return n
}

func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiles) > 0 {
		l = 0
		for _, e := range m.Tiles {
			l += sovGame(uint64(e))
		}
		n += 1 + sovGame(uint64(l)) + l
	}
	if m.Width != 0 {
		n += 1 + sovGame(uint64(m.Width))
	}
	return n
}

func (m *Faction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Players) > 0 {
		for _, s := range m.Players {
			l = len(s)
			n += 1 + l + sovGame(uint64(l))
		}
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if len(m.Population) > 0 {
		for _, e := range m.Population {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *Populace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovGame(uint64(m.Amount))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Settlement != 0 {
		n += 1 + sovGame(uint64(m.Settlement))
	}
	if m.Used {
		n += 2
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovGame(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGame(uint64(m.Y))
	}
	return n
}

func (m *ResourceSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Food != 0 {
		n += 1 + sovGame(uint64(m.Food))
	}
	if m.Stone != 0 {
		n += 1 + sovGame(uint64(m.Stone))
	}
	if m.Wood != 0 {
		n += 1 + sovGame(uint64(m.Wood))
	}
	if m.Population != 0 {
		n += 1 + sovGame(uint64(m.Population))
	}
	if m.Tech != 0 {
		n += 1 + sovGame(uint64(m.Tech))
	}
	return n
}

func (m *Territory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Faction != 0 {
		n += 1 + sovGame(uint64(m.Faction))
	}
	if m.Populace != 0 {
		n += 1 + sovGame(uint64(m.Populace))
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Game) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &Map{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamVersion", wireType)
			}
			m.ParamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Territory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Territory == nil {
				m.Territory = make(map[uint32]*Territory)
			}
			var mapkey uint32
			var mapvalue *Territory
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGame
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGame
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Territory{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Territory[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameSnapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameSnapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &Map{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &State{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamVersion", wireType)
			}
			m.ParamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Overview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Overview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Overview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Map == nil {
				m.Map = &Map{}
			}
			if err := m.Map.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParamVersion", wireType)
			}
			m.ParamVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParamVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Factions = append(m.Factions, &Faction{})
			if err := m.Factions[len(m.Factions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gaia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gaia = append(m.Gaia, &Populace{})
			if err := m.Gaia[len(m.Gaia)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v Landscape
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Landscape(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tiles = append(m.Tiles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGame
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Tiles) == 0 {
					m.Tiles = make([]Landscape, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Landscape
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Landscape(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tiles = append(m.Tiles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Faction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Faction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Faction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceSet{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Population", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Population = append(m.Population, &Populace{})
			if err := m.Population[len(m.Population)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Populace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Populace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Populace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlement", wireType)
			}
			m.Settlement = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Settlement |= Settlement(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Used = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Food", wireType)
			}
			m.Food = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Food |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wood", wireType)
			}
			m.Wood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wood |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Population", wireType)
			}
			m.Population = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Population |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tech", wireType)
			}
			m.Tech = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tech |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Territory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Territory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Territory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			m.Faction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Faction |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Populace", wireType)
			}
			m.Populace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Populace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGame = fmt.Errorf("proto: unexpected end of group")
)
