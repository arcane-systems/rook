// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/matchmaker/query.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetRoomRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetRoomRequest) Reset()         { *m = QueryGetRoomRequest{} }
func (m *QueryGetRoomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoomRequest) ProtoMessage()    {}
func (*QueryGetRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{0}
}
func (m *QueryGetRoomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoomRequest.Merge(m, src)
}
func (m *QueryGetRoomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoomRequest proto.InternalMessageInfo

func (m *QueryGetRoomRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetRoomResponse struct {
	Room *Room `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
}

func (m *QueryGetRoomResponse) Reset()         { *m = QueryGetRoomResponse{} }
func (m *QueryGetRoomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetRoomResponse) ProtoMessage()    {}
func (*QueryGetRoomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{1}
}
func (m *QueryGetRoomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetRoomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetRoomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetRoomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetRoomResponse.Merge(m, src)
}
func (m *QueryGetRoomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetRoomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetRoomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetRoomResponse proto.InternalMessageInfo

func (m *QueryGetRoomResponse) GetRoom() *Room {
	if m != nil {
		return m.Room
	}
	return nil
}

type QueryGetInvitationsRequest struct {
	Player string `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (m *QueryGetInvitationsRequest) Reset()         { *m = QueryGetInvitationsRequest{} }
func (m *QueryGetInvitationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvitationsRequest) ProtoMessage()    {}
func (*QueryGetInvitationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{2}
}
func (m *QueryGetInvitationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvitationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvitationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvitationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvitationsRequest.Merge(m, src)
}
func (m *QueryGetInvitationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvitationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvitationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvitationsRequest proto.InternalMessageInfo

func (m *QueryGetInvitationsRequest) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

type QueryGetInvitationsResponse struct {
	Rooms map[uint64]*Room `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryGetInvitationsResponse) Reset()         { *m = QueryGetInvitationsResponse{} }
func (m *QueryGetInvitationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvitationsResponse) ProtoMessage()    {}
func (*QueryGetInvitationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{3}
}
func (m *QueryGetInvitationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvitationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvitationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvitationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvitationsResponse.Merge(m, src)
}
func (m *QueryGetInvitationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvitationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvitationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvitationsResponse proto.InternalMessageInfo

func (m *QueryGetInvitationsResponse) GetRooms() map[uint64]*Room {
	if m != nil {
		return m.Rooms
	}
	return nil
}

type QueryGetModesRequest struct {
}

func (m *QueryGetModesRequest) Reset()         { *m = QueryGetModesRequest{} }
func (m *QueryGetModesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetModesRequest) ProtoMessage()    {}
func (*QueryGetModesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{4}
}
func (m *QueryGetModesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModesRequest.Merge(m, src)
}
func (m *QueryGetModesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModesRequest proto.InternalMessageInfo

type QueryGetModesResponse struct {
	Modes map[uint32]*Mode `protobuf:"bytes,1,rep,name=modes,proto3" json:"modes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryGetModesResponse) Reset()         { *m = QueryGetModesResponse{} }
func (m *QueryGetModesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetModesResponse) ProtoMessage()    {}
func (*QueryGetModesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{5}
}
func (m *QueryGetModesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetModesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetModesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetModesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetModesResponse.Merge(m, src)
}
func (m *QueryGetModesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetModesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetModesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetModesResponse proto.InternalMessageInfo

func (m *QueryGetModesResponse) GetModes() map[uint32]*Mode {
	if m != nil {
		return m.Modes
	}
	return nil
}

type QueryGetParamsRequest struct {
}

func (m *QueryGetParamsRequest) Reset()         { *m = QueryGetParamsRequest{} }
func (m *QueryGetParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetParamsRequest) ProtoMessage()    {}
func (*QueryGetParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{6}
}
func (m *QueryGetParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParamsRequest.Merge(m, src)
}
func (m *QueryGetParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParamsRequest proto.InternalMessageInfo

type QueryGetParamsResponse struct {
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryGetParamsResponse) Reset()         { *m = QueryGetParamsResponse{} }
func (m *QueryGetParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetParamsResponse) ProtoMessage()    {}
func (*QueryGetParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f43b8ebf9d04690, []int{7}
}
func (m *QueryGetParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetParamsResponse.Merge(m, src)
}
func (m *QueryGetParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetParamsResponse proto.InternalMessageInfo

func (m *QueryGetParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetRoomRequest)(nil), "rook.matchmaker.QueryGetRoomRequest")
	proto.RegisterType((*QueryGetRoomResponse)(nil), "rook.matchmaker.QueryGetRoomResponse")
	proto.RegisterType((*QueryGetInvitationsRequest)(nil), "rook.matchmaker.QueryGetInvitationsRequest")
	proto.RegisterType((*QueryGetInvitationsResponse)(nil), "rook.matchmaker.QueryGetInvitationsResponse")
	proto.RegisterMapType((map[uint64]*Room)(nil), "rook.matchmaker.QueryGetInvitationsResponse.RoomsEntry")
	proto.RegisterType((*QueryGetModesRequest)(nil), "rook.matchmaker.QueryGetModesRequest")
	proto.RegisterType((*QueryGetModesResponse)(nil), "rook.matchmaker.QueryGetModesResponse")
	proto.RegisterMapType((map[uint32]*Mode)(nil), "rook.matchmaker.QueryGetModesResponse.ModesEntry")
	proto.RegisterType((*QueryGetParamsRequest)(nil), "rook.matchmaker.QueryGetParamsRequest")
	proto.RegisterType((*QueryGetParamsResponse)(nil), "rook.matchmaker.QueryGetParamsResponse")
}

func init() { proto.RegisterFile("rook/matchmaker/query.proto", fileDescriptor_9f43b8ebf9d04690) }

var fileDescriptor_9f43b8ebf9d04690 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xcd, 0xe4, 0x4f, 0xfa, 0x6e, 0xf4, 0xf1, 0xe3, 0x36, 0x3f, 0x4c, 0x61, 0x14, 0x59, 0x04,
	0x82, 0x0a, 0x33, 0x6a, 0x40, 0x02, 0xb1, 0x03, 0x09, 0x55, 0x15, 0xaa, 0x80, 0x2c, 0xd9, 0xb9,
	0x89, 0x95, 0x8e, 0x92, 0x19, 0x4f, 0x6c, 0xa7, 0x62, 0x54, 0x75, 0xc3, 0x13, 0x20, 0x78, 0x12,
	0x1e, 0x80, 0x3d, 0xcb, 0x4a, 0x6c, 0x58, 0xa2, 0x84, 0xa7, 0x60, 0x85, 0xc6, 0x76, 0x98, 0x49,
	0x4a, 0x9a, 0xb0, 0x9b, 0xb1, 0xcf, 0x3d, 0xf7, 0x1c, 0xdf, 0x63, 0xc3, 0x0e, 0x67, 0x6c, 0xe8,
	0x05, 0x44, 0xf6, 0x8e, 0x03, 0x32, 0xa4, 0xdc, 0x1b, 0x4f, 0x28, 0x8f, 0xdd, 0x88, 0x33, 0xc9,
	0xd0, 0xd5, 0x64, 0xd3, 0x4d, 0x37, 0xed, 0x9b, 0x03, 0xc6, 0x06, 0x23, 0xea, 0x91, 0xc8, 0xf7,
	0x48, 0x18, 0x32, 0x49, 0xa4, 0xcf, 0x42, 0xa1, 0xe1, 0x76, 0x73, 0x99, 0x2b, 0xfd, 0xd4, 0x08,
	0xdc, 0x82, 0xad, 0x37, 0x09, 0xff, 0x3e, 0x95, 0x5d, 0xc6, 0x82, 0x2e, 0x1d, 0x4f, 0xa8, 0x90,
	0xe8, 0x0a, 0xe4, 0xfd, 0x7e, 0xc3, 0x6a, 0x5a, 0xed, 0x62, 0x37, 0xef, 0xf7, 0xf1, 0x33, 0xd8,
	0x5e, 0x84, 0x89, 0x88, 0x85, 0x82, 0xa2, 0x7b, 0x50, 0xe4, 0x8c, 0x05, 0x0a, 0x59, 0xe9, 0x54,
	0xdd, 0x25, 0x79, 0xae, 0x02, 0x2b, 0x08, 0x7e, 0x04, 0xf6, 0x9c, 0xe2, 0x20, 0x3c, 0xf1, 0x8d,
	0xd0, 0x79, 0xc3, 0x1a, 0x94, 0xa3, 0x11, 0x89, 0x29, 0x57, 0x54, 0xff, 0x75, 0xcd, 0x1f, 0xfe,
	0x62, 0xc1, 0xce, 0x5f, 0xcb, 0x8c, 0x80, 0x43, 0x28, 0x25, 0xec, 0xa2, 0x61, 0x35, 0x0b, 0xed,
	0x4a, 0xe7, 0xf1, 0x05, 0x05, 0x97, 0x14, 0x2b, 0x75, 0xe2, 0x45, 0x28, 0x79, 0xdc, 0xd5, 0x2c,
	0xf6, 0x2b, 0x80, 0x74, 0x11, 0x5d, 0x83, 0xc2, 0x90, 0xc6, 0xe6, 0x18, 0x92, 0x4f, 0xb4, 0x0b,
	0xa5, 0x13, 0x32, 0x9a, 0xd0, 0x46, 0xfe, 0x32, 0xc3, 0x1a, 0xf3, 0x34, 0xff, 0xc4, 0xc2, 0xb5,
	0xf4, 0xe0, 0x0e, 0x59, 0x9f, 0xce, 0xfd, 0xe2, 0xcf, 0x16, 0x54, 0x97, 0x36, 0x8c, 0xa3, 0x7d,
	0x28, 0x05, 0xc9, 0x82, 0x71, 0xb4, 0xb7, 0xd2, 0xd1, 0x42, 0x99, 0xab, 0xfe, 0x8c, 0x17, 0x55,
	0x9f, 0x78, 0x49, 0x17, 0xb3, 0x5e, 0xfe, 0xdf, 0xd0, 0x4b, 0x52, 0x9d, 0xf5, 0x52, 0x4f, 0x25,
	0xbf, 0x26, 0x9c, 0x04, 0x7f, 0xcc, 0x1c, 0x40, 0x6d, 0x79, 0xc3, 0x98, 0xf1, 0xa0, 0x1c, 0xa9,
	0x15, 0x93, 0x90, 0xfa, 0x85, 0x26, 0xa6, 0xc0, 0xc0, 0x3a, 0xbf, 0x0a, 0x50, 0x52, 0x5c, 0x88,
	0x43, 0x31, 0x39, 0x4c, 0x74, 0x7b, 0xe5, 0x01, 0x64, 0x02, 0x6b, 0xb7, 0xd6, 0xa0, 0xb4, 0x1e,
	0x7c, 0xeb, 0xfd, 0xb7, 0x9f, 0x9f, 0xf2, 0x75, 0x54, 0xcd, 0x5e, 0x8a, 0x64, 0xf4, 0xde, 0xa9,
	0xdf, 0x3f, 0x43, 0x1f, 0x2d, 0xa8, 0x64, 0x82, 0x82, 0x76, 0x37, 0x8b, 0x93, 0x96, 0x70, 0xff,
	0x5f, 0xb2, 0x87, 0xdb, 0x4a, 0x09, 0x46, 0xcd, 0xac, 0x12, 0x3f, 0x05, 0x7a, 0xa7, 0xfa, 0x06,
	0x9c, 0xa1, 0x31, 0x94, 0xd4, 0x1c, 0x51, 0x6b, 0x5d, 0x14, 0xb4, 0x8e, 0x3b, 0x9b, 0x25, 0x06,
	0xdf, 0x50, 0x0a, 0xb6, 0xd0, 0xf5, 0x85, 0x07, 0x42, 0x75, 0x9a, 0x40, 0x59, 0xcf, 0x05, 0xad,
	0x26, 0x5b, 0x88, 0x80, 0x7d, 0x77, 0x2d, 0xce, 0x74, 0xb5, 0x55, 0xd7, 0x6d, 0x84, 0xb2, 0x5d,
	0xf5, 0xf0, 0x9f, 0xbf, 0xfc, 0x3a, 0x75, 0xac, 0xf3, 0xa9, 0x63, 0xfd, 0x98, 0x3a, 0xd6, 0x87,
	0x99, 0x93, 0x3b, 0x9f, 0x39, 0xb9, 0xef, 0x33, 0x27, 0xf7, 0x76, 0x6f, 0xe0, 0xcb, 0xe3, 0xc9,
	0x91, 0xdb, 0x63, 0x81, 0x47, 0x78, 0x8f, 0x84, 0xf4, 0x81, 0x88, 0x85, 0xa4, 0x81, 0xf0, 0xd4,
	0x13, 0xf7, 0x2e, 0xcb, 0x26, 0xe3, 0x88, 0x8a, 0xa3, 0xb2, 0x7a, 0xe0, 0x1e, 0xfe, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0x26, 0x4f, 0x93, 0xc7, 0x50, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Room returns the current state of a specific room
	Room(ctx context.Context, in *QueryGetRoomRequest, opts ...grpc.CallOption) (*QueryGetRoomResponse, error)
	// Invitations lists all the rooms that a player is invited to
	Invitations(ctx context.Context, in *QueryGetInvitationsRequest, opts ...grpc.CallOption) (*QueryGetInvitationsResponse, error)
	// Modes lists all the public available modes
	Modes(ctx context.Context, in *QueryGetModesRequest, opts ...grpc.CallOption) (*QueryGetModesResponse, error)
	// Params lists the current matchmaker params
	Params(ctx context.Context, in *QueryGetParamsRequest, opts ...grpc.CallOption) (*QueryGetParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Room(ctx context.Context, in *QueryGetRoomRequest, opts ...grpc.CallOption) (*QueryGetRoomResponse, error) {
	out := new(QueryGetRoomResponse)
	err := c.cc.Invoke(ctx, "/rook.matchmaker.Query/Room", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invitations(ctx context.Context, in *QueryGetInvitationsRequest, opts ...grpc.CallOption) (*QueryGetInvitationsResponse, error) {
	out := new(QueryGetInvitationsResponse)
	err := c.cc.Invoke(ctx, "/rook.matchmaker.Query/Invitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Modes(ctx context.Context, in *QueryGetModesRequest, opts ...grpc.CallOption) (*QueryGetModesResponse, error) {
	out := new(QueryGetModesResponse)
	err := c.cc.Invoke(ctx, "/rook.matchmaker.Query/Modes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryGetParamsRequest, opts ...grpc.CallOption) (*QueryGetParamsResponse, error) {
	out := new(QueryGetParamsResponse)
	err := c.cc.Invoke(ctx, "/rook.matchmaker.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Room returns the current state of a specific room
	Room(context.Context, *QueryGetRoomRequest) (*QueryGetRoomResponse, error)
	// Invitations lists all the rooms that a player is invited to
	Invitations(context.Context, *QueryGetInvitationsRequest) (*QueryGetInvitationsResponse, error)
	// Modes lists all the public available modes
	Modes(context.Context, *QueryGetModesRequest) (*QueryGetModesResponse, error)
	// Params lists the current matchmaker params
	Params(context.Context, *QueryGetParamsRequest) (*QueryGetParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Room(ctx context.Context, req *QueryGetRoomRequest) (*QueryGetRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Room not implemented")
}
func (*UnimplementedQueryServer) Invitations(ctx context.Context, req *QueryGetInvitationsRequest) (*QueryGetInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invitations not implemented")
}
func (*UnimplementedQueryServer) Modes(ctx context.Context, req *QueryGetModesRequest) (*QueryGetModesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modes not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryGetParamsRequest) (*QueryGetParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Room_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Room(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rook.matchmaker.Query/Room",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Room(ctx, req.(*QueryGetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rook.matchmaker.Query/Invitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invitations(ctx, req.(*QueryGetInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Modes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetModesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Modes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rook.matchmaker.Query/Modes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Modes(ctx, req.(*QueryGetModesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rook.matchmaker.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryGetParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rook.matchmaker.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Room",
			Handler:    _Query_Room_Handler,
		},
		{
			MethodName: "Invitations",
			Handler:    _Query_Invitations_Handler,
		},
		{
			MethodName: "Modes",
			Handler:    _Query_Modes_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rook/matchmaker/query.proto",
}

func (m *QueryGetRoomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetRoomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetRoomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetRoomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Room != nil {
		{
			size, err := m.Room.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInvitationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvitationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvitationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Player) > 0 {
		i -= len(m.Player)
		copy(dAtA[i:], m.Player)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Player)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInvitationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvitationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvitationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for k := range m.Rooms {
			v := m.Rooms[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetModesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetModesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetModesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetModesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Modes) > 0 {
		for k := range m.Modes {
			v := m.Modes[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetRoomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetRoomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Room != nil {
		l = m.Room.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInvitationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Player)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInvitationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for k, v := range m.Rooms {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + sovQuery(uint64(k)) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryGetModesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetModesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Modes) > 0 {
		for k, v := range m.Modes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + sovQuery(uint64(k)) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryGetParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetRoomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetRoomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetRoomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetRoomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Room == nil {
				m.Room = &Room{}
			}
			if err := m.Room.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInvitationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvitationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvitationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInvitationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvitationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvitationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rooms == nil {
				m.Rooms = make(map[uint64]*Room)
			}
			var mapkey uint64
			var mapvalue *Room
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Room{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rooms[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetModesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetModesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetModesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Modes == nil {
				m.Modes = make(map[uint32]*Mode)
			}
			var mapkey uint32
			var mapvalue *Mode
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Mode{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Modes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
