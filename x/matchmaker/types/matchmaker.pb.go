// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/matchmaker/matchmaker.proto

package types

import (
	fmt "fmt"
	types "github.com/cmwaters/rook/x/game/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Room struct {
	// the config to be used for the game
	Config *types.Config `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// the current players in the room
	Players []string `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	// pending invitations for players that can join (like a whitelist)
	Pending []string `protobuf:"bytes,3,rep,name=pending,proto3" json:"pending,omitempty"`
	// anyone can join
	Public bool `protobuf:"varint,4,opt,name=public,proto3" json:"public,omitempty"`
	// the minimum amount of players needed to start a game
	Quorum uint32 `protobuf:"varint,5,opt,name=quorum,proto3" json:"quorum,omitempty"`
	// the max amount of players that can join the room
	Capacity uint32 `protobuf:"varint,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// when the room was created. Rooms get garbage collected after a while
	Created time.Time `protobuf:"bytes,7,opt,name=created,proto3,stdtime" json:"created"`
	// when quorum is reached and we are locked in to starting the game.
	// The prestart_wait_period gives a bufer for more people to join if they
	// want.
	Ready time.Time `protobuf:"bytes,8,opt,name=ready,proto3,stdtime" json:"ready"`
}

func (m *Room) Reset()         { *m = Room{} }
func (m *Room) String() string { return proto.CompactTextString(m) }
func (*Room) ProtoMessage()    {}
func (*Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29eb5cfff5372ca, []int{0}
}
func (m *Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Room.Merge(m, src)
}
func (m *Room) XXX_Size() int {
	return m.Size()
}
func (m *Room) XXX_DiscardUnknown() {
	xxx_messageInfo_Room.DiscardUnknown(m)
}

var xxx_messageInfo_Room proto.InternalMessageInfo

func (m *Room) GetConfig() *types.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Room) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *Room) GetPending() []string {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *Room) GetPublic() bool {
	if m != nil {
		return m.Public
	}
	return false
}

func (m *Room) GetQuorum() uint32 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *Room) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Room) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *Room) GetReady() time.Time {
	if m != nil {
		return m.Ready
	}
	return time.Time{}
}

// CommonRoom is an open room that matchmaker will automatically manage
type CommonRoom struct {
	// the game mode to be played
	ModeId uint32 `protobuf:"varint,1,opt,name=mode_id,json=modeId,proto3" json:"mode_id,omitempty"`
	// the current players in the room
	Players []string `protobuf:"bytes,2,rep,name=players,proto3" json:"players,omitempty"`
	// when the room was created. Rooms get garbage collected after a while
	Created time.Time `protobuf:"bytes,3,opt,name=created,proto3,stdtime" json:"created"`
	// when quorum is reached and we are locked in to starting the game.
	// The prestart_wait_period gives a bufer for more people to join if they
	// want.
	Ready time.Time `protobuf:"bytes,4,opt,name=ready,proto3,stdtime" json:"ready"`
}

func (m *CommonRoom) Reset()         { *m = CommonRoom{} }
func (m *CommonRoom) String() string { return proto.CompactTextString(m) }
func (*CommonRoom) ProtoMessage()    {}
func (*CommonRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29eb5cfff5372ca, []int{1}
}
func (m *CommonRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRoom.Merge(m, src)
}
func (m *CommonRoom) XXX_Size() int {
	return m.Size()
}
func (m *CommonRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRoom.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRoom proto.InternalMessageInfo

func (m *CommonRoom) GetModeId() uint32 {
	if m != nil {
		return m.ModeId
	}
	return 0
}

func (m *CommonRoom) GetPlayers() []string {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *CommonRoom) GetCreated() time.Time {
	if m != nil {
		return m.Created
	}
	return time.Time{}
}

func (m *CommonRoom) GetReady() time.Time {
	if m != nil {
		return m.Ready
	}
	return time.Time{}
}

// Modes are a way of accumulating a small set of possible games that people can choose between
type Mode struct {
	Id       uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Config   *types.Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Quorum   uint32        `protobuf:"varint,3,opt,name=quorum,proto3" json:"quorum,omitempty"`
	Capacity uint32        `protobuf:"varint,4,opt,name=capacity,proto3" json:"capacity,omitempty"`
}

func (m *Mode) Reset()         { *m = Mode{} }
func (m *Mode) String() string { return proto.CompactTextString(m) }
func (*Mode) ProtoMessage()    {}
func (*Mode) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29eb5cfff5372ca, []int{2}
}
func (m *Mode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mode.Merge(m, src)
}
func (m *Mode) XXX_Size() int {
	return m.Size()
}
func (m *Mode) XXX_DiscardUnknown() {
	xxx_messageInfo_Mode.DiscardUnknown(m)
}

var xxx_messageInfo_Mode proto.InternalMessageInfo

func (m *Mode) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Mode) GetConfig() *types.Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Mode) GetQuorum() uint32 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *Mode) GetCapacity() uint32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

type Params struct {
	// the maximum duration a room can last for before it is closed and all
	// players are kicked
	RoomLifespan time.Duration `protobuf:"bytes,1,opt,name=room_lifespan,json=roomLifespan,proto3,stdduration" json:"room_lifespan"`
	// the period betwee a quorum of players readying up and the start of the
	// game. This allows a few more players to join
	PrestartWaitPeriod time.Duration `protobuf:"bytes,2,opt,name=prestart_wait_period,json=prestartWaitPeriod,proto3,stdduration" json:"prestart_wait_period"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d29eb5cfff5372ca, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetRoomLifespan() time.Duration {
	if m != nil {
		return m.RoomLifespan
	}
	return 0
}

func (m *Params) GetPrestartWaitPeriod() time.Duration {
	if m != nil {
		return m.PrestartWaitPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*Room)(nil), "rook.matchaker.Room")
	proto.RegisterType((*CommonRoom)(nil), "rook.matchaker.CommonRoom")
	proto.RegisterType((*Mode)(nil), "rook.matchaker.Mode")
	proto.RegisterType((*Params)(nil), "rook.matchaker.Params")
}

func init() { proto.RegisterFile("rook/matchmaker/matchmaker.proto", fileDescriptor_d29eb5cfff5372ca) }

var fileDescriptor_d29eb5cfff5372ca = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x8e, 0xd3, 0x30,
	0x18, 0xad, 0xd3, 0x4c, 0x5a, 0x0c, 0x1d, 0x09, 0xab, 0x82, 0xd0, 0x45, 0x1a, 0x75, 0x55, 0x84,
	0x94, 0x48, 0xb0, 0x63, 0xc1, 0x62, 0x06, 0x24, 0x90, 0x40, 0x1a, 0x45, 0x20, 0x24, 0x36, 0x95,
	0x1b, 0xbb, 0x19, 0x6b, 0xea, 0x7c, 0xc1, 0x71, 0x34, 0xf4, 0x16, 0xb3, 0xe4, 0x0a, 0x2c, 0x38,
	0x01, 0x17, 0x98, 0xe5, 0x2c, 0x59, 0x01, 0x6a, 0x2f, 0x82, 0xe2, 0x38, 0x43, 0x01, 0xf1, 0x53,
	0xcd, 0x26, 0xf2, 0xfb, 0xde, 0xf7, 0x9c, 0xf7, 0xfc, 0xd9, 0x38, 0x54, 0x00, 0x27, 0xb1, 0xa4,
	0x3a, 0x3d, 0x96, 0xf4, 0x84, 0xab, 0xad, 0x65, 0x54, 0x28, 0xd0, 0x40, 0xf6, 0xeb, 0x8e, 0xc8,
	0x94, 0xeb, 0xea, 0x68, 0x98, 0x41, 0x06, 0x86, 0x8a, 0xeb, 0x55, 0xd3, 0x35, 0x0a, 0x32, 0x80,
	0x6c, 0xc9, 0x63, 0x83, 0xe6, 0xd5, 0x22, 0x66, 0x95, 0xa2, 0x5a, 0x40, 0x6e, 0xf9, 0xf1, 0xaf,
	0xbc, 0x16, 0x92, 0x97, 0x9a, 0xca, 0xc2, 0x36, 0x0c, 0x8d, 0x91, 0x8c, 0x4a, 0x6e, 0x3e, 0x4d,
	0x75, 0xf2, 0xd1, 0xc1, 0x6e, 0x02, 0x20, 0xc9, 0x5d, 0xec, 0xa5, 0x90, 0x2f, 0x44, 0xe6, 0xa3,
	0x10, 0x4d, 0xaf, 0xdf, 0xbf, 0x19, 0x19, 0x5b, 0xa6, 0xf5, 0xd0, 0x10, 0x89, 0x6d, 0x20, 0x3e,
	0xee, 0x15, 0x4b, 0xba, 0xe2, 0xaa, 0xf4, 0x9d, 0xb0, 0x3b, 0xbd, 0x96, 0xb4, 0xd0, 0x30, 0x3c,
	0x67, 0x22, 0xcf, 0xfc, 0xae, 0x65, 0x1a, 0x48, 0x6e, 0x61, 0xaf, 0xa8, 0xe6, 0x4b, 0x91, 0xfa,
	0x6e, 0x88, 0xa6, 0xfd, 0xc4, 0xa2, 0xba, 0xfe, 0xb6, 0x02, 0x55, 0x49, 0x7f, 0x2f, 0x44, 0xd3,
	0x41, 0x62, 0x11, 0x19, 0xe1, 0x7e, 0x4a, 0x0b, 0x9a, 0x0a, 0xbd, 0xf2, 0x3d, 0xc3, 0x5c, 0x62,
	0xf2, 0x08, 0xf7, 0x52, 0xc5, 0xa9, 0xe6, 0xcc, 0xef, 0x19, 0xaf, 0xa3, 0xa8, 0x09, 0x1f, 0xb5,
	0xe1, 0xa3, 0x97, 0x6d, 0xf8, 0x83, 0xfe, 0xf9, 0x97, 0x71, 0xe7, 0xec, 0xeb, 0x18, 0x25, 0xad,
	0x88, 0x3c, 0xc4, 0x7b, 0x8a, 0x53, 0xb6, 0xf2, 0xfb, 0x3b, 0xa8, 0x1b, 0xc9, 0xe4, 0x13, 0xc2,
	0xf8, 0x10, 0xa4, 0x84, 0xdc, 0x9c, 0xda, 0x6d, 0xdc, 0x93, 0xc0, 0xf8, 0x4c, 0x30, 0x73, 0x6c,
	0x83, 0xc4, 0xab, 0xe1, 0x33, 0xf6, 0x97, 0x33, 0xda, 0x72, 0xdf, 0xbd, 0x92, 0x7b, 0x77, 0x77,
	0xf7, 0x15, 0x76, 0x5f, 0x00, 0xe3, 0x64, 0x1f, 0x3b, 0x97, 0x8e, 0x1d, 0xc1, 0xb6, 0x86, 0xef,
	0xfc, 0x6b, 0xf8, 0x3f, 0x06, 0xd6, 0xfd, 0xe3, 0xc0, 0xdc, 0x9f, 0x07, 0x36, 0xf9, 0x80, 0xb0,
	0x77, 0x44, 0x15, 0x95, 0x25, 0x79, 0x8a, 0x07, 0x0a, 0x40, 0xce, 0x96, 0x62, 0xc1, 0xcb, 0x82,
	0xe6, 0xf6, 0xb6, 0xdd, 0xf9, 0x2d, 0xc5, 0x63, 0x7b, 0xbd, 0x9b, 0x10, 0xef, 0xeb, 0x10, 0x37,
	0x6a, 0xe5, 0x73, 0x2b, 0x24, 0xaf, 0xf0, 0xb0, 0x50, 0x75, 0x50, 0xa5, 0x67, 0xa7, 0x54, 0xe8,
	0x59, 0xc1, 0x95, 0x00, 0x66, 0x13, 0xfc, 0xd7, 0x86, 0xa4, 0xdd, 0xe0, 0x35, 0x15, 0xfa, 0xc8,
	0xc8, 0x0f, 0x9e, 0x9c, 0xaf, 0x03, 0x74, 0xb1, 0x0e, 0xd0, 0xb7, 0x75, 0x80, 0xce, 0x36, 0x41,
	0xe7, 0x62, 0x13, 0x74, 0x3e, 0x6f, 0x82, 0xce, 0x9b, 0x7b, 0x99, 0xd0, 0xc7, 0xd5, 0x3c, 0x4a,
	0x41, 0xc6, 0xa9, 0x3c, 0xa5, 0x9a, 0xab, 0x32, 0x36, 0x8f, 0xea, 0xdd, 0xf6, 0xfb, 0xd6, 0xab,
	0x82, 0x97, 0x73, 0xcf, 0xfc, 0xf7, 0xc1, 0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xe4, 0x5a,
	0x35, 0xff, 0x03, 0x00, 0x00,
}

func (m *Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Room) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Room) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Ready, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Ready):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintMatchmaker(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x42
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMatchmaker(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x3a
	if m.Capacity != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x30
	}
	if m.Quorum != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x28
	}
	if m.Public {
		i--
		if m.Public {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Pending) > 0 {
		for iNdEx := len(m.Pending) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pending[iNdEx])
			copy(dAtA[i:], m.Pending[iNdEx])
			i = encodeVarintMatchmaker(dAtA, i, uint64(len(m.Pending[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Players[iNdEx])
			copy(dAtA[i:], m.Players[iNdEx])
			i = encodeVarintMatchmaker(dAtA, i, uint64(len(m.Players[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatchmaker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommonRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Ready, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Ready):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintMatchmaker(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Created, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Created):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintMatchmaker(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Players[iNdEx])
			copy(dAtA[i:], m.Players[iNdEx])
			i = encodeVarintMatchmaker(dAtA, i, uint64(len(m.Players[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ModeId != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.ModeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Mode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Capacity != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.Capacity))
		i--
		dAtA[i] = 0x20
	}
	if m.Quorum != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.Quorum))
		i--
		dAtA[i] = 0x18
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMatchmaker(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMatchmaker(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.PrestartWaitPeriod, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.PrestartWaitPeriod):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintMatchmaker(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	n8, err8 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.RoomLifespan, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.RoomLifespan):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintMatchmaker(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMatchmaker(dAtA []byte, offset int, v uint64) int {
	offset -= sovMatchmaker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMatchmaker(uint64(l))
	}
	if len(m.Players) > 0 {
		for _, s := range m.Players {
			l = len(s)
			n += 1 + l + sovMatchmaker(uint64(l))
		}
	}
	if len(m.Pending) > 0 {
		for _, s := range m.Pending {
			l = len(s)
			n += 1 + l + sovMatchmaker(uint64(l))
		}
	}
	if m.Public {
		n += 2
	}
	if m.Quorum != 0 {
		n += 1 + sovMatchmaker(uint64(m.Quorum))
	}
	if m.Capacity != 0 {
		n += 1 + sovMatchmaker(uint64(m.Capacity))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovMatchmaker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Ready)
	n += 1 + l + sovMatchmaker(uint64(l))
	return n
}

func (m *CommonRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModeId != 0 {
		n += 1 + sovMatchmaker(uint64(m.ModeId))
	}
	if len(m.Players) > 0 {
		for _, s := range m.Players {
			l = len(s)
			n += 1 + l + sovMatchmaker(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Created)
	n += 1 + l + sovMatchmaker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Ready)
	n += 1 + l + sovMatchmaker(uint64(l))
	return n
}

func (m *Mode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMatchmaker(uint64(m.Id))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMatchmaker(uint64(l))
	}
	if m.Quorum != 0 {
		n += 1 + sovMatchmaker(uint64(m.Quorum))
	}
	if m.Capacity != 0 {
		n += 1 + sovMatchmaker(uint64(m.Capacity))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.RoomLifespan)
	n += 1 + l + sovMatchmaker(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.PrestartWaitPeriod)
	n += 1 + l + sovMatchmaker(uint64(l))
	return n
}

func sovMatchmaker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMatchmaker(x uint64) (n int) {
	return sovMatchmaker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchmaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pending = append(m.Pending, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Public", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Public = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Ready, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchmaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchmaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModeId", wireType)
			}
			m.ModeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModeId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Created, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ready", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Ready, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchmaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchmaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &types.Config{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quorum", wireType)
			}
			m.Quorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quorum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capacity", wireType)
			}
			m.Capacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capacity |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatchmaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatchmaker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomLifespan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.RoomLifespan, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrestartWaitPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatchmaker
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.PrestartWaitPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatchmaker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMatchmaker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatchmaker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatchmaker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatchmaker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMatchmaker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMatchmaker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMatchmaker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMatchmaker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatchmaker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMatchmaker = fmt.Errorf("proto: unexpected end of group")
)
