// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rook/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Direction int32

const (
	Direction_LEFT  Direction = 0
	Direction_RIGHT Direction = 1
	Direction_UP    Direction = 2
	Direction_DOWN  Direction = 3
)

var Direction_name = map[int32]string{
	0: "LEFT",
	1: "RIGHT",
	2: "UP",
	3: "DOWN",
}

var Direction_value = map[string]int32{
	"LEFT":  0,
	"RIGHT": 1,
	"UP":    2,
	"DOWN":  3,
}

func (x Direction) String() string {
	return proto.EnumName(Direction_name, int32(x))
}

func (Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{0}
}

type Landscape int32

const (
	Landscape_UNKNOWN   Landscape = 0
	Landscape_PLAINS    Landscape = 1
	Landscape_FOREST    Landscape = 2
	Landscape_MOUNTAINS Landscape = 3
	Landscape_LAKE      Landscape = 4
)

var Landscape_name = map[int32]string{
	0: "UNKNOWN",
	1: "PLAINS",
	2: "FOREST",
	3: "MOUNTAINS",
	4: "LAKE",
}

var Landscape_value = map[string]int32{
	"UNKNOWN":   0,
	"PLAINS":    1,
	"FOREST":    2,
	"MOUNTAINS": 3,
	"LAKE":      4,
}

func (x Landscape) String() string {
	return proto.EnumName(Landscape_name, int32(x))
}

func (Landscape) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{1}
}

type Settlement int32

const (
	Settlement_NONE       Settlement = 0
	Settlement_TOWN       Settlement = 1
	Settlement_CITY       Settlement = 2
	Settlement_CAPITAL    Settlement = 3
	Settlement_LUMBERMILL Settlement = 4
	Settlement_QUARRY     Settlement = 5
	Settlement_FARM       Settlement = 6
	Settlement_ROOK       Settlement = 7
)

var Settlement_name = map[int32]string{
	0: "NONE",
	1: "TOWN",
	2: "CITY",
	3: "CAPITAL",
	4: "LUMBERMILL",
	5: "QUARRY",
	6: "FARM",
	7: "ROOK",
}

var Settlement_value = map[string]int32{
	"NONE":       0,
	"TOWN":       1,
	"CITY":       2,
	"CAPITAL":    3,
	"LUMBERMILL": 4,
	"QUARRY":     5,
	"FARM":       6,
	"ROOK":       7,
}

func (x Settlement) String() string {
	return proto.EnumName(Settlement_name, int32(x))
}

func (Settlement) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{2}
}

type Map struct {
	Tiles []*Tile `protobuf:"bytes,1,rep,name=tiles,proto3" json:"tiles,omitempty"`
	Width uint32  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{0}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Map.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(m, src)
}
func (m *Map) XXX_Size() int {
	return m.Size()
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetTiles() []*Tile {
	if m != nil {
		return m.Tiles
	}
	return nil
}

func (m *Map) GetWidth() uint32 {
	if m != nil {
		return m.Width
	}
	return 0
}

type Tile struct {
	Landscape Landscape `protobuf:"varint,1,opt,name=landscape,proto3,enum=cmwaters.rook.rook.Landscape" json:"landscape,omitempty"`
	Faction   string    `protobuf:"bytes,2,opt,name=faction,proto3" json:"faction,omitempty"`
}

func (m *Tile) Reset()         { *m = Tile{} }
func (m *Tile) String() string { return proto.CompactTextString(m) }
func (*Tile) ProtoMessage()    {}
func (*Tile) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{1}
}
func (m *Tile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tile.Merge(m, src)
}
func (m *Tile) XXX_Size() int {
	return m.Size()
}
func (m *Tile) XXX_DiscardUnknown() {
	xxx_messageInfo_Tile.DiscardUnknown(m)
}

var xxx_messageInfo_Tile proto.InternalMessageInfo

func (m *Tile) GetLandscape() Landscape {
	if m != nil {
		return m.Landscape
	}
	return Landscape_UNKNOWN
}

func (m *Tile) GetFaction() string {
	if m != nil {
		return m.Faction
	}
	return ""
}

type Faction struct {
	Resources   *ResourceSet          `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	Population  map[uint32]uint32     `protobuf:"bytes,2,rep,name=population,proto3" json:"population,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Settlements map[uint32]Settlement `protobuf:"bytes,3,rep,name=settlements,proto3" json:"settlements,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=cmwaters.rook.rook.Settlement"`
}

func (m *Faction) Reset()         { *m = Faction{} }
func (m *Faction) String() string { return proto.CompactTextString(m) }
func (*Faction) ProtoMessage()    {}
func (*Faction) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{2}
}
func (m *Faction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Faction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Faction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Faction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Faction.Merge(m, src)
}
func (m *Faction) XXX_Size() int {
	return m.Size()
}
func (m *Faction) XXX_DiscardUnknown() {
	xxx_messageInfo_Faction.DiscardUnknown(m)
}

var xxx_messageInfo_Faction proto.InternalMessageInfo

func (m *Faction) GetResources() *ResourceSet {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Faction) GetPopulation() map[uint32]uint32 {
	if m != nil {
		return m.Population
	}
	return nil
}

func (m *Faction) GetSettlements() map[uint32]Settlement {
	if m != nil {
		return m.Settlements
	}
	return nil
}

type Position struct {
	X uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{3}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Position) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type ResourceSet struct {
	Food       uint32 `protobuf:"varint,1,opt,name=food,proto3" json:"food,omitempty"`
	Stone      uint32 `protobuf:"varint,2,opt,name=stone,proto3" json:"stone,omitempty"`
	Wood       uint32 `protobuf:"varint,3,opt,name=wood,proto3" json:"wood,omitempty"`
	Population uint32 `protobuf:"varint,4,opt,name=population,proto3" json:"population,omitempty"`
}

func (m *ResourceSet) Reset()         { *m = ResourceSet{} }
func (m *ResourceSet) String() string { return proto.CompactTextString(m) }
func (*ResourceSet) ProtoMessage()    {}
func (*ResourceSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee33de4997bd4474, []int{4}
}
func (m *ResourceSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResourceSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceSet.Merge(m, src)
}
func (m *ResourceSet) XXX_Size() int {
	return m.Size()
}
func (m *ResourceSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceSet.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceSet proto.InternalMessageInfo

func (m *ResourceSet) GetFood() uint32 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *ResourceSet) GetStone() uint32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

func (m *ResourceSet) GetWood() uint32 {
	if m != nil {
		return m.Wood
	}
	return 0
}

func (m *ResourceSet) GetPopulation() uint32 {
	if m != nil {
		return m.Population
	}
	return 0
}

func init() {
	proto.RegisterEnum("cmwaters.rook.rook.Direction", Direction_name, Direction_value)
	proto.RegisterEnum("cmwaters.rook.rook.Landscape", Landscape_name, Landscape_value)
	proto.RegisterEnum("cmwaters.rook.rook.Settlement", Settlement_name, Settlement_value)
	proto.RegisterType((*Map)(nil), "cmwaters.rook.rook.Map")
	proto.RegisterType((*Tile)(nil), "cmwaters.rook.rook.Tile")
	proto.RegisterType((*Faction)(nil), "cmwaters.rook.rook.Faction")
	proto.RegisterMapType((map[uint32]uint32)(nil), "cmwaters.rook.rook.Faction.PopulationEntry")
	proto.RegisterMapType((map[uint32]Settlement)(nil), "cmwaters.rook.rook.Faction.SettlementsEntry")
	proto.RegisterType((*Position)(nil), "cmwaters.rook.rook.Position")
	proto.RegisterType((*ResourceSet)(nil), "cmwaters.rook.rook.ResourceSet")
}

func init() { proto.RegisterFile("rook/types.proto", fileDescriptor_ee33de4997bd4474) }

var fileDescriptor_ee33de4997bd4474 = []byte{
	// 592 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0xc6, 0xf9, 0xa8, 0x27, 0xb4, 0xac, 0x56, 0x1c, 0xac, 0x4a, 0x98, 0x2a, 0x12, 0x28,
	0x2a, 0xc8, 0x91, 0x02, 0x07, 0x04, 0xaa, 0x50, 0xda, 0x26, 0x10, 0xc5, 0xb1, 0xc3, 0xc6, 0x11,
	0x2a, 0x12, 0x48, 0x6e, 0xba, 0x6d, 0xad, 0xba, 0x59, 0xcb, 0xde, 0xd0, 0xe6, 0xce, 0x0f, 0xe0,
	0x67, 0x71, 0xec, 0x91, 0x23, 0x6a, 0xff, 0x08, 0xda, 0x75, 0x12, 0x9b, 0x12, 0x71, 0xb1, 0xde,
	0x78, 0xde, 0xbc, 0xb7, 0xb3, 0xb3, 0x1a, 0xc0, 0x31, 0xe7, 0x17, 0x4d, 0x31, 0x8f, 0x58, 0x62,
	0x45, 0x31, 0x17, 0x9c, 0x90, 0xc9, 0xe5, 0x95, 0x2f, 0x58, 0x9c, 0x58, 0x32, 0xa5, 0x3e, 0xf5,
	0x3e, 0x68, 0x03, 0x3f, 0x22, 0x16, 0x94, 0x45, 0x10, 0xb2, 0xc4, 0x40, 0x3b, 0x5a, 0xa3, 0xd6,
	0x32, 0xac, 0x7f, 0xa9, 0x96, 0x17, 0x84, 0x8c, 0xa6, 0x34, 0xf2, 0x08, 0xca, 0x57, 0xc1, 0x89,
	0x38, 0x37, 0x8a, 0x3b, 0xa8, 0xb1, 0x49, 0xd3, 0xa0, 0xfe, 0x05, 0x4a, 0x92, 0x44, 0xde, 0x82,
	0x1e, 0xfa, 0xd3, 0x93, 0x64, 0xe2, 0x47, 0xcc, 0x40, 0x3b, 0xa8, 0xb1, 0xd5, 0x7a, 0xbc, 0x4e,
	0xd1, 0x5e, 0x92, 0x68, 0xc6, 0x27, 0x06, 0x54, 0x4f, 0xfd, 0x89, 0x08, 0xf8, 0x54, 0x89, 0xeb,
	0x74, 0x19, 0xd6, 0xbf, 0x6b, 0x50, 0xed, 0xa6, 0x98, 0xec, 0x81, 0x1e, 0xb3, 0x84, 0xcf, 0xe2,
	0x89, 0x3a, 0x34, 0x6a, 0xd4, 0x5a, 0x4f, 0xd6, 0x59, 0xd0, 0x05, 0x69, 0xc4, 0x04, 0xcd, 0x2a,
	0x48, 0x1f, 0x20, 0xe2, 0xd1, 0x2c, 0xf4, 0x17, 0x3e, 0xb2, 0xe9, 0xe7, 0xeb, 0xea, 0x17, 0x7e,
	0xd6, 0x70, 0xc5, 0xee, 0x4c, 0x45, 0x3c, 0xa7, 0xb9, 0x72, 0xe2, 0x40, 0x2d, 0x61, 0x42, 0x84,
	0xec, 0x92, 0x4d, 0x45, 0x62, 0x68, 0x4a, 0xed, 0xc5, 0xff, 0xd4, 0x46, 0x19, 0x3d, 0x95, 0xcb,
	0x0b, 0x6c, 0xef, 0xc1, 0xc3, 0x7b, 0x76, 0x04, 0x83, 0x76, 0xc1, 0xe6, 0xaa, 0xd1, 0x4d, 0x2a,
	0xa1, 0x9c, 0xc0, 0x37, 0x3f, 0x9c, 0xb1, 0xe5, 0x04, 0x54, 0xf0, 0xa6, 0xf8, 0x1a, 0x6d, 0x7f,
	0x05, 0x7c, 0x5f, 0x7f, 0x4d, 0xfd, 0xab, 0x7c, 0xfd, 0x56, 0xcb, 0x5c, 0x77, 0xdc, 0x4c, 0x26,
	0xa7, 0x5f, 0x7f, 0x06, 0x1b, 0x43, 0x9e, 0x04, 0xaa, 0xf5, 0x07, 0x80, 0xae, 0x0d, 0x4d, 0xa9,
	0xa2, 0x6b, 0x19, 0xcd, 0x8d, 0x52, 0x1a, 0xcd, 0xeb, 0x17, 0x50, 0xcb, 0xdd, 0x3e, 0x21, 0x50,
	0x3a, 0xe5, 0xfc, 0x64, 0x71, 0x06, 0x85, 0x65, 0x13, 0x89, 0xe0, 0xd3, 0x55, 0x13, 0x2a, 0x90,
	0xcc, 0x2b, 0xc9, 0x4c, 0x75, 0x15, 0x26, 0xe6, 0x5f, 0x03, 0x4b, 0x3d, 0x72, 0x7f, 0x76, 0x5b,
	0xa0, 0x1f, 0x06, 0x31, 0x4b, 0x1f, 0xc7, 0x06, 0x94, 0xec, 0x4e, 0xd7, 0xc3, 0x05, 0xa2, 0x43,
	0x99, 0xf6, 0xde, 0x7f, 0xf0, 0x30, 0x22, 0x15, 0x28, 0x8e, 0x87, 0xb8, 0x28, 0x93, 0x87, 0xee,
	0x27, 0x07, 0x6b, 0xbb, 0x3d, 0xd0, 0x57, 0x2f, 0x90, 0xd4, 0xa0, 0x3a, 0x76, 0xfa, 0x8e, 0xcc,
	0x14, 0x08, 0x40, 0x65, 0x68, 0xb7, 0x7b, 0xce, 0x08, 0x23, 0x89, 0xbb, 0x2e, 0xed, 0x8c, 0x3c,
	0x5c, 0x24, 0x9b, 0xa0, 0x0f, 0xdc, 0xb1, 0xe3, 0xa9, 0x94, 0xa6, 0x7c, 0xda, 0xfd, 0x0e, 0x2e,
	0xed, 0x9e, 0x01, 0x64, 0x97, 0x25, 0xff, 0x3b, 0xae, 0xd3, 0xc1, 0x05, 0x89, 0x3c, 0x29, 0x89,
	0x24, 0x3a, 0xe8, 0x79, 0x47, 0xb8, 0x28, 0x9d, 0x0e, 0xda, 0xc3, 0x9e, 0xd7, 0xb6, 0xb1, 0x46,
	0xb6, 0x00, 0xec, 0xf1, 0x60, 0xbf, 0x43, 0x07, 0x3d, 0xdb, 0xc6, 0x25, 0xe9, 0xf6, 0x71, 0xdc,
	0xa6, 0xf4, 0x08, 0x97, 0x65, 0x49, 0xb7, 0x4d, 0x07, 0xb8, 0x22, 0x11, 0x75, 0xdd, 0x3e, 0xae,
	0xee, 0xbf, 0xfb, 0x79, 0x6b, 0xa2, 0x9b, 0x5b, 0x13, 0xfd, 0xbe, 0x35, 0xd1, 0x8f, 0x3b, 0xb3,
	0x70, 0x73, 0x67, 0x16, 0x7e, 0xdd, 0x99, 0x85, 0xcf, 0x4f, 0xcf, 0x02, 0x71, 0x3e, 0x3b, 0xb6,
	0x26, 0xfc, 0xb2, 0xb9, 0x9c, 0x65, 0x53, 0xed, 0x80, 0xeb, 0x66, 0xb6, 0x0a, 0x8e, 0x2b, 0x6a,
	0x17, 0xbc, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xcd, 0xbc, 0x8c, 0x1f, 0x04, 0x00, 0x00,
}

func (m *Map) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Map) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Map) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Width != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tiles) > 0 {
		for iNdEx := len(m.Tiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Tile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Faction) > 0 {
		i -= len(m.Faction)
		copy(dAtA[i:], m.Faction)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Faction)))
		i--
		dAtA[i] = 0x12
	}
	if m.Landscape != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Landscape))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Faction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Faction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Faction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Settlements) > 0 {
		for k := range m.Settlements {
			v := m.Settlements[k]
			baseI := i
			i = encodeVarintTypes(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTypes(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Population) > 0 {
		for k := range m.Population {
			v := m.Population[k]
			baseI := i
			i = encodeVarintTypes(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintTypes(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x20
	}
	if m.X != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func (m *ResourceSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResourceSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Population != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Population))
		i--
		dAtA[i] = 0x20
	}
	if m.Wood != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Wood))
		i--
		dAtA[i] = 0x18
	}
	if m.Stone != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Stone))
		i--
		dAtA[i] = 0x10
	}
	if m.Food != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Food))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Map) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tiles) > 0 {
		for _, e := range m.Tiles {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Width != 0 {
		n += 1 + sovTypes(uint64(m.Width))
	}
	return n
}

func (m *Tile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Landscape != 0 {
		n += 1 + sovTypes(uint64(m.Landscape))
	}
	l = len(m.Faction)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Faction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.Population) > 0 {
		for k, v := range m.Population {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if len(m.Settlements) > 0 {
		for k, v := range m.Settlements {
			_ = k
			_ = v
			mapEntrySize := 1 + sovTypes(uint64(k)) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTypes(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTypes(uint64(m.Y))
	}
	return n
}

func (m *ResourceSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Food != 0 {
		n += 1 + sovTypes(uint64(m.Food))
	}
	if m.Stone != 0 {
		n += 1 + sovTypes(uint64(m.Stone))
	}
	if m.Wood != 0 {
		n += 1 + sovTypes(uint64(m.Wood))
	}
	if m.Population != 0 {
		n += 1 + sovTypes(uint64(m.Population))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Map) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Map: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Map: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tiles = append(m.Tiles, &Tile{})
			if err := m.Tiles[len(m.Tiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landscape", wireType)
			}
			m.Landscape = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Landscape |= Landscape(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Faction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Faction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Faction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Faction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Faction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &ResourceSet{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Population", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Population == nil {
				m.Population = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Population[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settlements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settlements == nil {
				m.Settlements = make(map[uint32]Settlement)
			}
			var mapkey uint32
			var mapvalue Settlement
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= Settlement(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Settlements[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Food", wireType)
			}
			m.Food = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Food |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wood", wireType)
			}
			m.Wood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wood |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Population", wireType)
			}
			m.Population = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Population |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
